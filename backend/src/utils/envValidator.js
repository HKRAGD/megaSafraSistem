const { logger } = require('../config/logger');

/**
 * Validador de vari√°veis de ambiente obrigat√≥rias
 * Garante que todas as configura√ß√µes cr√≠ticas estejam presentes
 */

// Vari√°veis obrigat√≥rias para funcionamento b√°sico
const REQUIRED_VARS = [
  'NODE_ENV',
  'MONGODB_URI',
  'JWT_SECRET',
  'JWT_REFRESH_SECRET'
];

// Vari√°veis recomendadas para produ√ß√£o
const PRODUCTION_RECOMMENDED_VARS = [
  'PORT',
  'HOST',
  'CORS_ORIGIN',
  'BCRYPT_ROUNDS',
  'API_URL_PUBLIC'
];

// Vari√°veis opcionais mas √∫teis
const OPTIONAL_VARS = [
  'PUBLIC_IP',
  'LOCAL_IP',
  'API_URL_LOCAL',
  'JWT_EXPIRES_IN',
  'JWT_REFRESH_EXPIRES_IN'
];

/**
 * Valida se todas as vari√°veis obrigat√≥rias est√£o definidas
 */
function validateRequiredVars() {
  console.log('\nüîç ================ VALIDA√á√ÉO DE VARI√ÅVEIS ================');
  
  const missing = [];
  const present = [];
  
  // Verificar vari√°veis obrigat√≥rias
  REQUIRED_VARS.forEach(varName => {
    if (!process.env[varName]) {
      missing.push(varName);
    } else {
      present.push(varName);
    }
  });
  
  // Log das vari√°veis obrigat√≥rias
  console.log('üìã VARI√ÅVEIS OBRIGAT√ìRIAS:');
  present.forEach(varName => {
    console.log(`   ‚úÖ ${varName}: Configurado`);
  });
  
  missing.forEach(varName => {
    console.log(`   ‚ùå ${varName}: N√ÉO CONFIGURADO`);
  });
  
  // Se h√° vari√°veis faltando, encerrar aplica√ß√£o
  if (missing.length > 0) {
    logger.error('Environment validation failed', {
      category: 'startup',
      missingVars: missing,
      requiredVars: REQUIRED_VARS
    });
    
    console.log('\nüö® ERRO CR√çTICO: Vari√°veis de ambiente obrigat√≥rias n√£o configuradas!');
    console.log('üìù Configure as seguintes vari√°veis antes de iniciar o servidor:');
    missing.forEach(varName => {
      console.log(`   ‚Ä¢ ${varName}`);
    });
    console.log('\nüí° Exemplo de configura√ß√£o no Railway:');
    console.log('   NODE_ENV=production');
    console.log('   MONGODB_URI=mongodb+srv://user:pass@cluster.mongodb.net/dbname');
    console.log('   JWT_SECRET=[GERAR_SECRET_FORTE_64_CHARS]');
    console.log('   JWT_REFRESH_SECRET=[GERAR_REFRESH_SECRET_FORTE_64_CHARS]');
    console.log('\nüîß Encerrando aplica√ß√£o...\n');
    
    process.exit(1);
  }
  
  // Verificar vari√°veis recomendadas para produ√ß√£o
  if (process.env.NODE_ENV === 'production') {
    console.log('\nüìã VARI√ÅVEIS RECOMENDADAS PARA PRODU√á√ÉO:');
    
    const missingProd = [];
    
    PRODUCTION_RECOMMENDED_VARS.forEach(varName => {
      if (!process.env[varName]) {
        missingProd.push(varName);
        console.log(`   ‚ö†Ô∏è ${varName}: N√ÉO CONFIGURADO (recomendado)`);
      } else {
        console.log(`   ‚úÖ ${varName}: Configurado`);
      }
    });
    
    if (missingProd.length > 0) {
      logger.warn('Production environment missing recommended variables', {
        category: 'startup',
        missingRecommended: missingProd
      });
    }
  }
  
  // Log das vari√°veis opcionais
  console.log('\nüìã VARI√ÅVEIS OPCIONAIS:');
  OPTIONAL_VARS.forEach(varName => {
    if (process.env[varName]) {
      console.log(`   ‚úÖ ${varName}: Configurado`);
    } else {
      console.log(`   ‚ûñ ${varName}: N√£o configurado (opcional)`);
    }
  });
  
  console.log('=======================================================\n');
  
  logger.info('Environment validation completed successfully', {
    category: 'startup',
    requiredVarsCount: REQUIRED_VARS.length,
    presentVarsCount: present.length,
    environment: process.env.NODE_ENV
  });
  
  return true;
}

/**
 * Valida configura√ß√µes espec√≠ficas de produ√ß√£o
 */
function validateProductionConfig() {
  if (process.env.NODE_ENV !== 'production') {
    return true;
  }
  
  console.log('\nüîí ============= VALIDA√á√ÉO DE PRODU√á√ÉO =============');
  
  const warnings = [];
  
  // Verificar se JWT secrets s√£o diferentes dos de desenvolvimento
  const devJwtPattern = /_dev$|development|teste|test/i;
  
  if (devJwtPattern.test(process.env.JWT_SECRET || '')) {
    warnings.push('JWT_SECRET parece ser de desenvolvimento');
  }
  
  if (devJwtPattern.test(process.env.JWT_REFRESH_SECRET || '')) {
    warnings.push('JWT_REFRESH_SECRET parece ser de desenvolvimento');
  }
  
  // Verificar se MongoDB URI √© de produ√ß√£o
  if (process.env.MONGODB_URI && process.env.MONGODB_URI.includes('localhost')) {
    warnings.push('MONGODB_URI aponta para localhost (deveria ser MongoDB Atlas)');
  }
  
  // Verificar CORS configuration
  if (!process.env.CORS_ORIGIN) {
    warnings.push('CORS_ORIGIN n√£o configurado - pode causar problemas de conectividade');
  } else if (process.env.CORS_ORIGIN.includes('localhost')) {
    warnings.push('CORS_ORIGIN inclui localhost em produ√ß√£o');
  }
  
  // Log dos warnings
  if (warnings.length > 0) {
    console.log('‚ö†Ô∏è AVISOS DE PRODU√á√ÉO:');
    warnings.forEach(warning => {
      console.log(`   ‚Ä¢ ${warning}`);
    });
    
    logger.warn('Production configuration warnings detected', {
      category: 'startup',
      warnings
    });
  } else {
    console.log('‚úÖ Configura√ß√£o de produ√ß√£o v√°lida');
  }
  
  console.log('===============================================\n');
  
  return warnings.length === 0;
}

/**
 * Executa valida√ß√£o completa do ambiente
 */
function validateEnvironment() {
  try {
    validateRequiredVars();
    validateProductionConfig();
    return true;
  } catch (error) {
    logger.error('Environment validation error', {
      category: 'startup',
      error: error.message
    });
    console.error('üö® Erro na valida√ß√£o do ambiente:', error.message);
    process.exit(1);
  }
}

module.exports = {
  validateEnvironment,
  validateRequiredVars,
  validateProductionConfig,
  REQUIRED_VARS,
  PRODUCTION_RECOMMENDED_VARS,
  OPTIONAL_VARS
};
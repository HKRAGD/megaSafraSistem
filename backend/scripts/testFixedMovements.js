const mongoose = require('mongoose');
const Product = require('../src/models/Product');
const Location = require('../src/models/Location');
const Movement = require('../src/models/Movement');
const User = require('../src/models/User');
const productService = require('../src/services/productService');

// Conectar ao MongoDB
mongoose.connect('mongodb://localhost:27017/sistema-sementes-test', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

const testAllMovementOperations = async () => {
  try {
    console.log('\nüß™ TESTANDO TODAS AS OPERA√á√ïES DE MOVIMENTA√á√ÉO AP√ìS CORRE√á√ÉO\n');

    // Buscar usu√°rio admin
    const user = await User.findOne({ role: 'admin' });
    if (!user) {
      console.log('‚ùå Nenhum usu√°rio admin encontrado');
      return;
    }

    // Buscar produto para teste
    const product = await Product.findOne({ status: 'stored' }).populate('locationId');
    if (!product) {
      console.log('‚ùå Nenhum produto encontrado');
      return;
    }

    console.log('üì¶ Produto de teste:', {
      id: product._id,
      name: product.name,
      lot: product.lot,
      quantity: product.quantity,
      currentLocation: product.locationId.code
    });

    // Buscar localiza√ß√µes dispon√≠veis
    const availableLocations = await Location.find({
      isOccupied: false,
      _id: { $ne: product.locationId._id }
    }).limit(3);

    if (availableLocations.length < 3) {
      console.log('‚ùå N√£o h√° localiza√ß√µes suficientes para teste');
      return;
    }

    console.log('üìç Localiza√ß√µes dispon√≠veis:');
    availableLocations.forEach((loc, index) => {
      console.log(`  ${index + 1}. ${loc.code} (${loc.maxCapacityKg}kg)`);
    });

    // TESTE 1: Movimenta√ß√£o completa consecutiva
    console.log('\nüöÄ TESTE 1: Movimenta√ß√µes consecutivas (movimenta√ß√£o completa)');
    
    try {
      // Primeira movimenta√ß√£o
      const move1 = await productService.moveProduct(
        product._id,
        availableLocations[0]._id,
        user._id,
        { reason: 'Teste 1.1 - Primeira movimenta√ß√£o' }
      );
      console.log('‚úÖ Primeira movimenta√ß√£o: SUCESSO');
      console.log(`   ‚Üí Movido para: ${move1.data.product.locationId.code}`);

      // Segunda movimenta√ß√£o (logo em seguida)
      const move2 = await productService.moveProduct(
        product._id,
        availableLocations[1]._id,
        user._id,
        { reason: 'Teste 1.2 - Segunda movimenta√ß√£o' }
      );
      console.log('‚úÖ Segunda movimenta√ß√£o: SUCESSO');
      console.log(`   ‚Üí Movido para: ${move2.data.product.locationId.code}`);

      // Terceira movimenta√ß√£o (logo em seguida)
      const move3 = await productService.moveProduct(
        product._id,
        availableLocations[2]._id,
        user._id,
        { reason: 'Teste 1.3 - Terceira movimenta√ß√£o' }
      );
      console.log('‚úÖ Terceira movimenta√ß√£o: SUCESSO');
      console.log(`   ‚Üí Movido para: ${move3.data.product.locationId.code}`);

    } catch (error) {
      console.log('‚ùå ERRO em movimenta√ß√£o completa:', error.message);
    }

    // TESTE 2: Movimenta√ß√£o parcial
    console.log('\nüîÑ TESTE 2: Movimenta√ß√£o parcial');
    
    try {
      const partialMove = await productService.partialMove(
        product._id,
        Math.floor(product.quantity / 2), // Metade da quantidade
        availableLocations[0]._id,
        user._id,
        { reason: 'Teste 2 - Movimenta√ß√£o parcial' }
      );
      console.log('‚úÖ Movimenta√ß√£o parcial: SUCESSO');
      console.log(`   ‚Üí Produto original: ${partialMove.data.originalProduct.quantity} unidades`);
      console.log(`   ‚Üí Novo produto: ${partialMove.data.newProduct.quantity} unidades`);
      console.log(`   ‚Üí Localiza√ß√£o nova: ${partialMove.data.newProduct.locationId.code}`);

    } catch (error) {
      console.log('‚ùå ERRO em movimenta√ß√£o parcial:', error.message);
    }

    // TESTE 3: Sa√≠da parcial
    console.log('\nüì§ TESTE 3: Sa√≠da parcial');
    
    try {
      const currentProduct = await Product.findById(product._id);
      const exitQuantity = Math.min(2, currentProduct.quantity); // M√°ximo 2 unidades
      
      const partialExit = await productService.partialExit(
        product._id,
        exitQuantity,
        user._id,
        { reason: 'Teste 3 - Sa√≠da parcial' }
      );
      console.log('‚úÖ Sa√≠da parcial: SUCESSO');
      console.log(`   ‚Üí Quantidade retirada: ${exitQuantity} unidades`);
      
      if (partialExit.data.productRemoved) {
        console.log('   ‚Üí Produto removido completamente (estoque zerado)');
      } else {
        console.log(`   ‚Üí Quantidade restante: ${partialExit.data.updatedProduct.quantity} unidades`);
      }

    } catch (error) {
      console.log('‚ùå ERRO em sa√≠da parcial:', error.message);
    }

    // TESTE 4: Adi√ß√£o de estoque (se produto ainda existe)
    console.log('\nüì• TESTE 4: Adi√ß√£o de estoque');
    
    try {
      const currentProduct = await Product.findById(product._id);
      
      if (currentProduct && currentProduct.status === 'stored') {
        const addStock = await productService.addStock(
          product._id,
          5, // Adicionar 5 unidades
          user._id,
          { reason: 'Teste 4 - Adi√ß√£o de estoque' }
        );
        console.log('‚úÖ Adi√ß√£o de estoque: SUCESSO');
        console.log(`   ‚Üí Quantidade anterior: ${addStock.data.quantityBefore} unidades`);
        console.log(`   ‚Üí Quantidade atual: ${addStock.data.quantityAfter} unidades`);
        console.log(`   ‚Üí Peso anterior: ${addStock.data.weightBefore}kg`);
        console.log(`   ‚Üí Peso atual: ${addStock.data.weightAfter}kg`);
      } else {
        console.log('‚ö†Ô∏è Produto foi removido, n√£o √© poss√≠vel adicionar estoque');
      }

    } catch (error) {
      console.log('‚ùå ERRO em adi√ß√£o de estoque:', error.message);
    }

    // VERIFICAR HIST√ìRICO
    console.log('\nüìã HIST√ìRICO DE MOVIMENTA√á√ïES DO PRODUTO:');
    const movements = await Movement.find({ productId: product._id })
      .populate('fromLocationId', 'code')
      .populate('toLocationId', 'code')
      .sort({ createdAt: -1 })
      .limit(10);

    movements.forEach((mov, index) => {
      console.log(`${index + 1}. ${mov.type.toUpperCase()} - ${mov.reason}`);
      console.log(`   De: ${mov.fromLocationId?.code || 'N/A'} ‚Üí Para: ${mov.toLocationId?.code || 'N/A'}`);
      console.log(`   Quantidade: ${mov.quantity}, Peso: ${mov.weight}kg`);
      console.log(`   Data: ${mov.createdAt.toLocaleString('pt-BR')}`);
      console.log(`   Autom√°tica: ${mov.metadata?.isAutomatic || false}`);
      console.log('');
    });

    console.log('üéâ TODOS OS TESTES CONCLU√çDOS!');

  } catch (error) {
    console.error('‚ùå ERRO GERAL:', error);
  } finally {
    mongoose.connection.close();
  }
};

// Executar testes
testAllMovementOperations(); 
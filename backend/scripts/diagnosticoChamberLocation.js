#!/usr/bin/env node

/**
 * Script de Diagn√≥stico: Correla√ß√£o C√¢maras x Localiza√ß√µes
 * Sistema de Gerenciamento de C√¢maras Refrigeradas
 * 
 * Este script verifica:
 * 1. Dados das c√¢maras no banco
 * 2. Dados das localiza√ß√µes no banco
 * 3. Correla√ß√£o correta entre chamberId das localiza√ß√µes e _id das c√¢maras
 * 4. Identifica problemas de correla√ß√£o
 */

const mongoose = require('mongoose');
require('dotenv').config();

// Conectar ao MongoDB
const connectDB = async () => {
  try {
    const conn = await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/sistema-sementes-test');
    console.log(`‚úÖ MongoDB conectado: ${conn.connection.host}`);
    return conn;
  } catch (error) {
    console.error('‚ùå Erro ao conectar ao MongoDB:', error.message);
    process.exit(1);
  }
};

// Schema simplificado para consultas
const chamberSchema = new mongoose.Schema({
  name: String,
  dimensions: {
    quadras: Number,
    lados: Number,
    filas: Number,
    andares: Number
  },
  status: String
}, { timestamps: true });

const locationSchema = new mongoose.Schema({
  chamberId: { type: mongoose.Schema.Types.ObjectId, ref: 'Chamber' },
  coordinates: {
    quadra: Number,
    lado: Number,
    fila: Number,
    andar: Number
  },
  code: String,
  isOccupied: Boolean,
  maxCapacityKg: Number,
  currentWeightKg: Number
}, { timestamps: true });

const Chamber = mongoose.model('Chamber', chamberSchema);
const Location = mongoose.model('Location', locationSchema);

const diagnosticar = async () => {
  console.log('\nüîç DIAGN√ìSTICO: Correla√ß√£o C√¢maras x Localiza√ß√µes');
  console.log('=' .repeat(60));

  try {
    // 1. Verificar c√¢maras
    console.log('\nüì¶ AN√ÅLISE DAS C√ÇMARAS:');
    const chambers = await Chamber.find({});
    console.log(`Total de c√¢maras: ${chambers.length}`);
    
    if (chambers.length === 0) {
      console.log('‚ùå Nenhuma c√¢mara encontrada no banco!');
      return;
    }

    chambers.forEach((chamber, index) => {
      console.log(`\n${index + 1}. C√¢mara: "${chamber.name}"`);
      console.log(`   ID: ${chamber._id}`);
      console.log(`   Dimens√µes: ${chamber.dimensions.quadras}x${chamber.dimensions.lados}x${chamber.dimensions.filas}x${chamber.dimensions.andares}`);
      console.log(`   Total te√≥rico de localiza√ß√µes: ${chamber.dimensions.quadras * chamber.dimensions.lados * chamber.dimensions.filas * chamber.dimensions.andares}`);
      console.log(`   Status: ${chamber.status}`);
    });

    // 2. Verificar localiza√ß√µes
    console.log('\nüìç AN√ÅLISE DAS LOCALIZA√á√ïES:');
    const locations = await Location.find({});
    console.log(`Total de localiza√ß√µes: ${locations.length}`);

    if (locations.length === 0) {
      console.log('‚ùå Nenhuma localiza√ß√£o encontrada no banco!');
      return;
    }

    // 3. Agrupar localiza√ß√µes por chamberId
    console.log('\nüîó CORRELA√á√ÉO POR C√ÇMARA:');
    const locationsByChamber = {};
    const idsNaoEncontrados = new Set();

    locations.forEach(location => {
      const chamberIdStr = location.chamberId.toString();
      if (!locationsByChamber[chamberIdStr]) {
        locationsByChamber[chamberIdStr] = [];
      }
      locationsByChamber[chamberIdStr].push(location);
    });

    for (const [chamberIdStr, locs] of Object.entries(locationsByChamber)) {
      const chamber = chambers.find(c => c._id.toString() === chamberIdStr);
      
      if (chamber) {
        console.log(`\n‚úÖ C√¢mara "${chamber.name}" (${chamber._id})`);
        console.log(`   Localiza√ß√µes relacionadas: ${locs.length}`);
        console.log(`   Ocupadas: ${locs.filter(l => l.isOccupied).length}`);
        console.log(`   Dispon√≠veis: ${locs.filter(l => !l.isOccupied).length}`);
        
        // Verificar se o n√∫mero bate com as dimens√µes
        const teorico = chamber.dimensions.quadras * chamber.dimensions.lados * chamber.dimensions.filas * chamber.dimensions.andares;
        if (locs.length === teorico) {
          console.log(`   ‚úÖ N√∫mero correto de localiza√ß√µes (${locs.length}/${teorico})`);
        } else {
          console.log(`   ‚ö†Ô∏è  N√∫mero incorreto de localiza√ß√µes (${locs.length}/${teorico})`);
        }
        
        // Mostrar algumas localiza√ß√µes como exemplo
        console.log(`   Exemplos: ${locs.slice(0, 3).map(l => l.code).join(', ')}${locs.length > 3 ? '...' : ''}`);
      } else {
        console.log(`\n‚ùå ID de c√¢mara n√£o encontrado: ${chamberIdStr}`);
        console.log(`   ${locs.length} localiza√ß√µes √≥rf√£s`);
        idsNaoEncontrados.add(chamberIdStr);
      }
    }

    // 4. Verificar IDs √≥rf√£os
    if (idsNaoEncontrados.size > 0) {
      console.log('\nüö® PROBLEMAS ENCONTRADOS:');
      console.log(`${idsNaoEncontrados.size} IDs de c√¢mara n√£o encontrados:`);
      idsNaoEncontrados.forEach(id => {
        const count = locationsByChamber[id].length;
        console.log(`   - ${id} (${count} localiza√ß√µes √≥rf√£s)`);
      });
    }

    // 5. Verificar localiza√ß√µes com problemas
    console.log('\nüîç VERIFICA√á√ÉO DETALHADA:');
    
    // Localiza√ß√µes populadas
    const locationsPopulated = await Location.find({}).populate('chamberId');
    const locationsComChamber = locationsPopulated.filter(loc => loc.chamberId);
    const locationsSemChamber = locationsPopulated.filter(loc => !loc.chamberId);
    
    console.log(`Localiza√ß√µes com c√¢mara v√°lida: ${locationsComChamber.length}`);
    console.log(`Localiza√ß√µes com c√¢mara nula/inv√°lida: ${locationsSemChamber.length}`);

    if (locationsSemChamber.length > 0) {
      console.log('\n‚ùå Localiza√ß√µes com problemas:');
      locationsSemChamber.slice(0, 5).forEach(loc => {
        console.log(`   - ${loc.code} (chamberId: ${loc.chamberId})`);
      });
    }

    // 6. Teste da API do frontend
    console.log('\nüåê TESTE DE INTEGRA√á√ÉO COM FRONTEND:');
    const axios = require('axios');
    
    try {
      // Login
      console.log('Fazendo login...');
      const loginResponse = await axios.post('http://localhost:3001/api/auth/login', {
        email: 'admin@sistema-sementes.com',
        password: 'admin123456'
      });
      
      const token = loginResponse.data.data.accessToken;
      console.log('‚úÖ Login realizado com sucesso');

      // Buscar c√¢maras
      console.log('Buscando c√¢maras via API...');
      const chambersResponse = await axios.get('http://localhost:3001/api/chambers', {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      const chambersAPI = chambersResponse.data.data || chambersResponse.data;
      console.log(`‚úÖ ${chambersAPI.length} c√¢maras encontradas via API`);

      // Buscar localiza√ß√µes
      console.log('Buscando localiza√ß√µes via API...');
      const locationsResponse = await axios.get('http://localhost:3001/api/locations', {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      const locationsAPI = locationsResponse.data.data || locationsResponse.data;
      console.log(`‚úÖ ${locationsAPI.length} localiza√ß√µes encontradas via API`);

      // Buscar localiza√ß√µes dispon√≠veis
      console.log('Buscando localiza√ß√µes dispon√≠veis via API...');
      const availableResponse = await axios.get('http://localhost:3001/api/locations/available', {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      const availableAPI = availableResponse.data.data || availableResponse.data;
      console.log(`‚úÖ ${availableAPI.length} localiza√ß√µes dispon√≠veis via API`);

      // Teste espec√≠fico: buscar localiza√ß√µes por c√¢mara
      if (chambersAPI.length > 0) {
        const firstChamber = chambersAPI[0];
        console.log(`\nTestando localiza√ß√µes para c√¢mara "${firstChamber.name}" (${firstChamber.id})...`);
        
        const chamberLocsResponse = await axios.get(`http://localhost:3001/api/locations/chamber/${firstChamber.id}`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        
        const chamberLocs = chamberLocsResponse.data.data || chamberLocsResponse.data;
        console.log(`‚úÖ ${chamberLocs.length} localiza√ß√µes encontradas para esta c√¢mara`);
        
        if (chamberLocs.length > 0) {
          console.log(`   Exemplos: ${chamberLocs.slice(0, 3).map(l => l.code).join(', ')}`);
        }
      }

    } catch (apiError) {
      console.log('‚ùå Erro na API:', apiError.response?.data?.message || apiError.message);
    }

    // 7. Resumo final
    console.log('\nüìä RESUMO FINAL:');
    console.log(`Total de c√¢maras: ${chambers.length}`);
    console.log(`Total de localiza√ß√µes: ${locations.length}`);
    console.log(`Localiza√ß√µes com c√¢mara v√°lida: ${locationsComChamber.length}`);
    console.log(`Localiza√ß√µes √≥rf√£s: ${locationsSemChamber.length}`);
    
    if (idsNaoEncontrados.size === 0 && locationsSemChamber.length === 0) {
      console.log('\nüéâ DIAGN√ìSTICO: Sistema funcionando corretamente!');
    } else {
      console.log('\n‚ö†Ô∏è  DIAGN√ìSTICO: Problemas encontrados na correla√ß√£o!');
    }

  } catch (error) {
    console.error('‚ùå Erro durante o diagn√≥stico:', error.message);
    console.error(error.stack);
  }
};

const main = async () => {
  await connectDB();
  await diagnosticar();
  await mongoose.disconnect();
  console.log('\n‚úÖ Diagn√≥stico conclu√≠do!');
};

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { diagnosticar }; 
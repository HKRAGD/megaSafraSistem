/**
 * Script para criar usu√°rio administrador inicial
 * Execute: node scripts/createAdmin.js
 */

require('dotenv').config();
const mongoose = require('mongoose');
const User = require('../src/models/User');

// Configura√ß√£o do usu√°rio admin
const ADMIN_CONFIG = {
  name: 'Administrador Sistema',
  email: 'admin@sistema-sementes.com',
  password: 'admin123456', // ALTERE ESTA SENHA AP√ìS O PRIMEIRO LOGIN!
  role: 'ADMIN'
};

/**
 * Fun√ß√£o principal para criar admin
 */
async function createAdminUser() {
  try {
    console.log('üîó Conectando ao MongoDB...');
    
    // Conectar ao MongoDB - usar banco de produ√ß√£o
    const mongoUri = "mongodb://mongo:LNRONlHSRBOrWmtnGRPYffZFzdgJMzHp@switchback.proxy.rlwy.net:25486/mega-safra-01";
    if (!mongoUri) {
      throw new Error('MONGODB_URI n√£o configurado no .env');
    }
    
    await mongoose.connect(mongoUri, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    
    console.log('‚úÖ Conectado ao MongoDB com sucesso!');
    
    // Verificar se j√° existe um admin
    const existingAdmin = await User.findOne({ role: 'ADMIN' });
    
    if (existingAdmin) {
      console.log('‚ö†Ô∏è  J√° existe um usu√°rio administrador no sistema:');
      console.log(`   üìß Email: ${existingAdmin.email}`);
      console.log(`   üë§ Nome: ${existingAdmin.name}`);
      console.log(`   üìÖ Criado em: ${existingAdmin.createdAt}`);
      console.log('\nüí° Se voc√™ esqueceu a senha, use o script resetPassword.js');
      return;
    }
    
    // Verificar se j√° existe usu√°rio com este email
    const existingUser = await User.findByEmail(ADMIN_CONFIG.email);
    
    if (existingUser) {
      console.log('‚ùå J√° existe um usu√°rio com este email no sistema!');
      console.log(`   üìß Email: ${existingUser.email}`);
      console.log(`   üë§ Nome: ${existingUser.name}`);
      console.log(`   üîê Role: ${existingUser.role}`);
      
      // Se for operator, promover para admin
      if (existingUser.role !== 'ADMIN') {
        console.log('\nüîÑ Promovendo usu√°rio existente para administrador...');
        existingUser.role = 'ADMIN';
        await existingUser.save();
        
        console.log('‚úÖ Usu√°rio promovido para administrador com sucesso!');
        console.log('\nüìã INFORMA√á√ïES DE ACESSO:');
        console.log(`   üìß Email: ${existingUser.email}`);
        console.log(`   üë§ Nome: ${existingUser.name}`);
        console.log(`   üîê Role: ${existingUser.role}`);
        console.log(`   üîë Senha: (use a senha atual do usu√°rio)`);
      }
      
      return;
    }
    
    console.log('üë§ Criando usu√°rio administrador...');
    
    // Criar usu√°rio admin
    const adminUser = await User.create(ADMIN_CONFIG);
    
    console.log('‚úÖ Usu√°rio administrador criado com sucesso!');
    console.log('\nüìã INFORMA√á√ïES DE ACESSO:');
    console.log(`   üìß Email: ${adminUser.email}`);
    console.log(`   üë§ Nome: ${adminUser.name}`);
    console.log(`   üîê Role: ${adminUser.role}`);
    console.log(`   üîë Senha: ${ADMIN_CONFIG.password}`);
    console.log('\n‚ö†Ô∏è  IMPORTANTE:');
    console.log('   üî¥ ALTERE A SENHA AP√ìS O PRIMEIRO LOGIN!');
    console.log('   üî¥ Mantenha essas credenciais em local seguro!');
    console.log('\nüåê Para acessar o sistema:');
    console.log(`   üîó Backend: ${mongoUri.includes('localhost') ? 'http://localhost:3001' : 'https://megasafrasistem-megasafra.up.railway.app'}`);
    console.log(`   üîó Frontend: ${mongoUri.includes('localhost') ? 'http://localhost:3000' : 'https://mega-safra-sistem.vercel.app'}`);
    console.log('   üìù Use as credenciais acima para fazer login no sistema');
    
  } catch (error) {
    console.error('‚ùå Erro ao criar usu√°rio administrador:', error.message);
    
    if (error.name === 'ValidationError') {
      console.log('\nüìù Detalhes dos erros de valida√ß√£o:');
      Object.keys(error.errors).forEach(key => {
        console.log(`   ‚Ä¢ ${key}: ${error.errors[key].message}`);
      });
    }
    
    if (error.code === 11000) {
      console.log('   ‚Ä¢ Email j√° existe no sistema');
    }
    
  } finally {
    // Fechar conex√£o
    console.log('\nüîå Fechando conex√£o com MongoDB...');
    await mongoose.connection.close();
    console.log('‚úÖ Conex√£o fechada.');
    process.exit(0);
  }
}

/**
 * Verificar se o script est√° sendo executado diretamente
 */
if (require.main === module) {
  console.log('üå± SCRIPT DE CRIA√á√ÉO DE USU√ÅRIO ADMINISTRADOR');
  console.log('==========================================\n');
  
  createAdminUser();
}

module.exports = { createAdminUser, ADMIN_CONFIG }; 
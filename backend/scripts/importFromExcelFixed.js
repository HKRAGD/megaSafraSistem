const XLSX = require('xlsx');
const mongoose = require('mongoose');
const path = require('path');

// Importar modelos
require('../src/models/User');
require('../src/models/SeedType');
require('../src/models/Chamber');
require('../src/models/Location');
require('../src/models/Product');
require('../src/models/Movement');

const User = mongoose.model('User');
const SeedType = mongoose.model('SeedType');
const Chamber = mongoose.model('Chamber');
const Location = mongoose.model('Location');
const Product = mongoose.model('Product');
const Movement = mongoose.model('Movement');

// Configura√ß√£o do banco
const MONGODB_URI = 'mongodb://localhost:27017/mega-safra-01';

async function connectToDatabase() {
  try {
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Conectado ao MongoDB - Banco: mega-safra-01');
  } catch (error) {
    console.error('‚ùå Erro ao conectar ao MongoDB:', error.message);
    process.exit(1);
  }
}

async function initializeSystem() {
  console.log('üöÄ Inicializando sistema...');

  // Buscar admin
  const admin = await User.findOne({ role: 'admin' });
  if (!admin) {
    console.error('‚ùå Usu√°rio admin n√£o encontrado! Execute o script de setup primeiro.');
    process.exit(1);
  }
  console.log(`üë§ Admin encontrado: ${admin.name} (${admin.email})`);

  // Buscar c√¢mara principal
  const chamber = await Chamber.findOne().sort({ createdAt: 1 });
  if (!chamber) {
    console.error('‚ùå Nenhuma c√¢mara encontrada! Crie uma c√¢mara primeiro.');
    process.exit(1);
  }
  console.log(`üè¢ C√¢mara encontrada: ${chamber.name}`);
  console.log(`   Dimens√µes: ${chamber.dimensions.quadras}x${chamber.dimensions.lados}x${chamber.dimensions.filas}x${chamber.dimensions.andares}`);

  // Buscar localiza√ß√µes
  const locations = await Location.find({ chamberId: chamber._id });
  console.log(`üìç ${locations.length} localiza√ß√µes encontradas na c√¢mara`);

  // Buscar/criar tipos de sementes
  const seedTypes = await createSeedTypesFromData();

  console.log('‚úÖ Sistema inicializado com dados existentes');
  
  return { admin, chamber, locations, seedTypes };
}

// Criar tipos de sementes baseados nos dados da planilha
async function createSeedTypesFromData() {
  const seedTypeNames = [
    'MILHO', 'SORGO', 'NUGRAIN', 'ENFORCE', 'NUSOL', 'FOX PREMIUM', 
    'SANY', 'MIX NUCLEAR', 'GIRASSO', 'PRINA ESPECIAL'
  ];

  const seedTypes = {};

  for (const name of seedTypeNames) {
    let seedType = await SeedType.findOne({ 
      name: { $regex: new RegExp(`^${name}`, 'i') } 
    });

    if (!seedType) {
      seedType = new SeedType({
        name: name,
        description: `Tipo de semente ${name}`,
        optimalTemperature: 18,
        optimalHumidity: 60,
        maxStorageTimeDays: 365,
        isActive: true
      });
      await seedType.save();
      console.log(`üì¶ Tipo de semente criado: ${name}`);
    }

    seedTypes[name] = seedType;
  }

  return seedTypes;
}

function readExcelFile(filePath) {
  console.log(`üìÑ Lendo arquivo Excel: ${path.basename(filePath)}`);
  
  const workbook = XLSX.readFile(filePath, { 
    cellText: false, 
    cellDates: true,
    raw: false,
    defval: null
  });
  
  const sheetName = workbook.SheetNames[0];
  const worksheet = workbook.Sheets[sheetName];
  const data = XLSX.utils.sheet_to_json(worksheet, { 
    header: 1,
    defval: null,
    raw: false
  });

  console.log(`üìä ${data.length} linhas encontradas na planilha`);
  return data;
}

function parseExcelData(data) {
  console.log('üîÑ Processando dados da planilha...');

  if (data.length < 2) {
    throw new Error('Planilha vazia ou sem dados v√°lidos');
  }

  // Primeira linha s√£o os cabe√ßalhos
  const headers = data[0].map(h => h ? h.toString().toLowerCase().trim() : '');
  console.log('üìã Cabe√ßalhos encontrados:', headers);

  // Mapear colunas
  const columnMap = {
    quadra: headers.indexOf('quadra'),
    lado: headers.indexOf('lado'),
    fila: headers.indexOf('fila'),
    andar: headers.indexOf('andar'),
    produto: headers.indexOf('produto'),
    lote: headers.indexOf('lote'),
    quantidade: headers.indexOf('quantidade'),
    kg: headers.indexOf('kg')
  };

  console.log('üó∫Ô∏è Mapeamento de colunas:', columnMap);

  // Verificar se todas as colunas essenciais foram encontradas
  const missingColumns = Object.entries(columnMap)
    .filter(([key, index]) => index === -1 && key !== 'kg') // kg pode estar ausente
    .map(([key]) => key);

  if (missingColumns.length > 0) {
    throw new Error(`Colunas n√£o encontradas: ${missingColumns.join(', ')}`);
  }

  const products = [];
  let validCount = 0;
  let skippedCount = 0;

  // Processar dados (come√ßando da linha 2)
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const lineNumber = i + 1;

    if (!row || row.length === 0) {
      skippedCount++;
      continue;
    }

    try {
      // Extrair dados da linha
      const quadra = getValue(row, columnMap.quadra);
      const lado = getValue(row, columnMap.lado);
      const fila = getValue(row, columnMap.fila);
      const andar = getValue(row, columnMap.andar);
      const produto = getValue(row, columnMap.produto);
      const lote = getValue(row, columnMap.lote);
      const quantidade = getValue(row, columnMap.quantidade);
      const kg = getValue(row, columnMap.kg);

      // Valida√ß√µes b√°sicas
      const errors = [];
      if (!quadra || isNaN(quadra)) errors.push('quadra');
      if (!lado) errors.push('lado');
      if (!fila || isNaN(fila)) errors.push('fila');
      if (!andar || isNaN(andar)) errors.push('andar');
      if (!produto) errors.push('produto');
      if (!lote) errors.push('lote');
      if (!quantidade || isNaN(quantidade)) errors.push('quantidade');

      if (errors.length > 0) {
        console.log(`‚ö†Ô∏è Linha ${lineNumber}: Campos inv√°lidos [${errors.join(', ')}] - pulando`);
        skippedCount++;
        continue;
      }

      // Converter valores
      const productData = {
        quadra: parseInt(quadra),
        lado: lado.toString().toUpperCase().trim(),
        fila: parseInt(fila),
        andar: parseInt(andar),
        produto: produto.toString().trim(),
        lote: lote.toString().trim(),
        quantidade: parseInt(quantidade),
        kgUnitario: kg ? parseFloat(kg) : null // Renomeado para deixar claro que √© peso unit√°rio
      };

      // Definir peso unit√°rio padr√£o se n√£o informado
      if (!productData.kgUnitario) {
        productData.kgUnitario = 1; // 1kg por unidade como padr√£o
        console.log(`üí° Linha ${lineNumber}: Peso unit√°rio definido como padr√£o: ${productData.kgUnitario}kg/unidade`);
      } else {
        console.log(`üìä Linha ${lineNumber}: ${productData.quantidade} unidades √ó ${productData.kgUnitario}kg = ${productData.quantidade * productData.kgUnitario}kg total`);
      }

      products.push({
        ...productData,
        lineNumber
      });

      validCount++;

    } catch (error) {
      console.log(`‚ùå Linha ${lineNumber}: Erro ao processar - ${error.message}`);
      skippedCount++;
    }
  }

  console.log(`‚úÖ ${validCount} linhas v√°lidas processadas`);
  console.log(`‚ö†Ô∏è ${skippedCount} linhas puladas por problemas`);

  return products;
}

function getValue(row, columnIndex) {
  if (columnIndex === -1 || !row[columnIndex]) return null;
  
  const value = row[columnIndex];
  if (value === null || value === undefined || value === '') return null;
  
  return value.toString().trim();
}

async function importProducts(productsData, { admin, chamber, locations, seedTypes }) {
  console.log(`üöÄ Iniciando importa√ß√£o de ${productsData.length} produtos...`);

  let successCount = 0;
  let errorCount = 0;
  const errors = [];

  // Criar mapa de localiza√ß√µes por coordenadas
  const locationMap = {};
  locations.forEach(loc => {
    const key = `${loc.coordinates.quadra}-${loc.coordinates.lado}-${loc.coordinates.fila}-${loc.coordinates.andar}`;
    locationMap[key] = loc;
  });

  for (const productData of productsData) {
    try {
      const { lineNumber, quadra, lado, fila, andar, produto, lote, quantidade, kgUnitario } = productData;

      // Encontrar localiza√ß√£o
      const locationKey = `${quadra}-${lado}-${fila}-${andar}`;
      const location = locationMap[locationKey];

      if (!location) {
        const error = `Linha ${lineNumber}: Localiza√ß√£o Q${quadra}-L${lado}-F${fila}-A${andar} n√£o encontrada`;
        console.log(`‚ùå ${error}`);
        errors.push(error);
        errorCount++;
        continue;
      }

      // Verificar se localiza√ß√£o est√° ocupada
      const existingProduct = await Product.findOne({ 
        locationId: location._id, 
        status: { $in: ['stored', 'reserved'] }
      });

      if (existingProduct) {
        const error = `Linha ${lineNumber}: Localiza√ß√£o j√° ocupada por produto "${existingProduct.name}"`;
        console.log(`‚ö†Ô∏è ${error}`);
        errors.push(error);
        errorCount++;
        continue;
      }

      // Determinar tipo de semente
      const seedType = findSeedType(produto, seedTypes);
      if (!seedType) {
        const error = `Linha ${lineNumber}: Tipo de semente n√£o encontrado para "${produto}"`;
        console.log(`‚ùå ${error}`);
        errors.push(error);
        errorCount++;
        continue;
      }

      // Calcular peso total para valida√ß√£o pr√©via
      const totalWeight = quantidade * kgUnitario;

      // Verificar capacidade
      if (totalWeight > location.maxCapacityKg) {
        const error = `Linha ${lineNumber}: Peso total (${totalWeight}kg) excede capacidade da localiza√ß√£o (${location.maxCapacityKg}kg)`;
        console.log(`‚ö†Ô∏è ${error}`);
        errors.push(error);
        errorCount++;
        continue;
      }

      // Criar produto (totalWeight ser√° calculado automaticamente pelo model)
      const product = new Product({
        name: `${produto} - Lote ${lote}`,
        lot: lote,
        seedTypeId: seedType._id,
        quantity: quantidade,
        storageType: 'saco',
        weightPerUnit: kgUnitario,
        locationId: location._id,
        entryDate: new Date(),
        status: 'stored',
        notes: `Importado da planilha - Linha ${lineNumber}`,
        metadata: {
          createdBy: admin._id,
          lastModifiedBy: admin._id
        }
      });

      await product.save();

      // Atualizar localiza√ß√£o (usar o peso calculado pelo model)
      location.isOccupied = true;
      location.currentWeightKg = product.totalWeight;
      await location.save();

      // Registrar movimenta√ß√£o (usar o peso calculado pelo model)
      const movement = new Movement({
        productId: product._id,
        type: 'entry',
        toLocationId: location._id,
        quantity: quantidade,
        weight: product.totalWeight,
        userId: admin._id,
        reason: 'Importa√ß√£o via Excel',
        notes: `Importado da planilha - Linha ${lineNumber}`,
        timestamp: new Date()
      });

      await movement.save();

      console.log(`‚úÖ Linha ${lineNumber}: Produto "${product.name}" importado com sucesso`);
      successCount++;

    } catch (error) {
      const errorMsg = `Linha ${productData.lineNumber}: Erro ao salvar - ${error.message}`;
      console.log(`‚ùå ${errorMsg}`);
      errors.push(errorMsg);
      errorCount++;
    }
  }

  return { successCount, errorCount, errors };
}

function findSeedType(productName, seedTypes) {
  const name = productName.toUpperCase();
  
  // Tentar match exato primeiro
  for (const [key, seedType] of Object.entries(seedTypes)) {
    if (name.includes(key)) {
      return seedType;
    }
  }

  // Se n√£o encontrou, usar um tipo gen√©rico ou criar
  return seedTypes['MILHO']; // Fallback para MILHO
}

async function main() {
  const filePath = process.argv[2];

  if (!filePath) {
    console.error('‚ùå Uso: node importFromExcelFixed.js <caminho-da-planilha.xlsx>');
    process.exit(1);
  }

  if (!filePath.endsWith('.xlsx') && !filePath.endsWith('.xls')) {
    console.error('‚ùå Arquivo deve ser Excel (.xlsx ou .xls)');
    process.exit(1);
  }

  try {
    // Conectar ao banco
    await connectToDatabase();

    // Inicializar sistema
    const systemData = await initializeSystem();

    // Ler arquivo Excel
    const data = readExcelFile(filePath);

    // Processar dados
    const productsData = parseExcelData(data);

    if (productsData.length === 0) {
      console.log('‚ùå Nenhum produto v√°lido encontrado na planilha');
      process.exit(1);
    }

    console.log(`\nüöÄ Importando ${productsData.length} produtos...`);

    // Importar produtos
    const result = await importProducts(productsData, systemData);

    // Resumo final
    console.log('\n================================================================================');
    console.log('üìä RESUMO DA IMPORTA√á√ÉO');
    console.log('================================================================================');
    console.log(`‚úÖ Produtos importados com sucesso: ${result.successCount}`);
    console.log(`‚ùå Produtos com erro: ${result.errorCount}`);
    console.log(`üìà Taxa de sucesso: ${((result.successCount / productsData.length) * 100).toFixed(1)}%`);

    if (result.errors.length > 0) {
      console.log('\n‚ö†Ô∏è ERROS ENCONTRADOS:');
      result.errors.slice(0, 10).forEach(error => console.log(`   ‚Ä¢ ${error}`));
      if (result.errors.length > 10) {
        console.log(`   ... e mais ${result.errors.length - 10} erros`);
      }
    }

    if (result.successCount > 0) {
      console.log('\nüéâ IMPORTA√á√ÉO CONCLU√çDA COM SUCESSO!');
      console.log('üì± Acesse o sistema para visualizar os produtos importados.');
    }

  } catch (error) {
    console.error('\n‚ùå ERRO NA IMPORTA√á√ÉO:', error.message);
    console.error('\nüí° DICAS:');
    console.error('   ‚Ä¢ Verifique se o MongoDB est√° rodando');
    console.error('   ‚Ä¢ Verifique se o arquivo Excel existe e est√° acess√≠vel');
    console.error('   ‚Ä¢ Verifique se a planilha tem as colunas corretas');
    console.error('   ‚Ä¢ Execute o script de setup do sistema primeiro');
  } finally {
    await mongoose.disconnect();
    process.exit(0);
  }
}

// Executar script
main().catch(console.error); 
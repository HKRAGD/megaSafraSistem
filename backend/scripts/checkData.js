const mongoose = require('mongoose');
const User = require('../src/models/User');
const SeedType = require('../src/models/SeedType');
const Chamber = require('../src/models/Chamber');
const Location = require('../src/models/Location');
const Product = require('../src/models/Product');
const Movement = require('../src/models/Movement');

async function checkData() {
  try {
    console.log('üîå Conectando ao MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/sistema-sementes-test');
    console.log('‚úÖ Conectado ao MongoDB\n');
    
    // ============================================================================
    // CONTAGEM GERAL DE DADOS
    // ============================================================================
    
    console.log('üìä === CONTAGEM GERAL DOS DADOS ===');
    const [userCount, seedTypeCount, chamberCount, locationCount, productCount, movementCount] = await Promise.all([
      User.countDocuments(),
      SeedType.countDocuments(),
      Chamber.countDocuments(),
      Location.countDocuments(),
      Product.countDocuments(),
      Movement.countDocuments()
    ]);
    
    console.log(`üë• Usu√°rios: ${userCount}`);
    console.log(`üå± Tipos de Sementes: ${seedTypeCount}`);
    console.log(`üè≠ C√¢maras: ${chamberCount}`);
    console.log(`üìç Localiza√ß√µes: ${locationCount}`);
    console.log(`üì¶ Produtos: ${productCount}`);
    console.log(`üìù Movimenta√ß√µes: ${movementCount}\n`);
    
    // ============================================================================
    // TESTE DETALHADO POR MODEL
    // ============================================================================
    
    // USUARIOS
    console.log('üë• === USU√ÅRIOS ===');
    if (userCount > 0) {
      const users = await User.find().limit(3).select('name email role isActive');
      users.forEach(user => console.log(` - ${user.name} (${user.email}) - Role: ${user.role}`));
    } else {
      console.log(' ‚ö†Ô∏è  Nenhum usu√°rio encontrado');
    }
    console.log();
    
    // TIPOS DE SEMENTES  
    console.log('üå± === TIPOS DE SEMENTES ===');
    if (seedTypeCount > 0) {
      const seedTypes = await SeedType.find().limit(3);
      seedTypes.forEach(st => console.log(` - ${st.name} (Temp: ${st.optimalTemperature}¬∞C, Umidade: ${st.optimalHumidity}%)`));
    } else {
      console.log(' ‚ö†Ô∏è  Nenhum tipo de semente encontrado');
    }
    console.log();
    
    // C√ÇMARAS
    console.log('üè≠ === C√ÇMARAS ===');
    if (chamberCount > 0) {
      const chambers = await Chamber.find().limit(3);
      chambers.forEach(chamber => {
        const { quadras, lados, filas, andares } = chamber.dimensions;
        const totalLocations = quadras * lados * filas * andares;
        console.log(` - ${chamber.name} (${quadras}x${lados}x${filas}x${andares} = ${totalLocations} localiza√ß√µes)`);
      });
    } else {
      console.log(' ‚ö†Ô∏è  Nenhuma c√¢mara encontrada');
    }
    console.log();
    
    // LOCALIZA√á√ïES
    console.log('üìç === LOCALIZA√á√ïES ===');
    if (locationCount > 0) {
      const locations = await Location.find().limit(5).populate('chamberId', 'name');
      const occupiedCount = await Location.countDocuments({ isOccupied: true });
      const availableCount = locationCount - occupiedCount;
      
      console.log(` üìä Total: ${locationCount} | Ocupadas: ${occupiedCount} | Dispon√≠veis: ${availableCount}`);
      locations.forEach(loc => {
        const chamber = loc.chamberId?.name || 'C√¢mara desconhecida';
        const status = loc.isOccupied ? 'üî¥ Ocupada' : 'üü¢ Livre';
        console.log(` - ${loc.code} (${chamber}) - ${status}`);
      });
    } else {
      console.log(' ‚ö†Ô∏è  Nenhuma localiza√ß√£o encontrada');
    }
    console.log();
    
    // PRODUTOS
    console.log('üì¶ === PRODUTOS ===');
    if (productCount > 0) {
      const products = await Product.find()
        .limit(5)
        .populate('seedTypeId', 'name')
        .populate('locationId', 'code')
        .select('name lot quantity totalWeight status');
        
      const productsByStatus = await Product.aggregate([
        { $group: { _id: '$status', count: { $sum: 1 } } }
      ]);
      
      console.log(' üìä Por Status:');
      productsByStatus.forEach(stat => console.log(`   - ${stat._id}: ${stat.count}`));
      
      console.log(' üì¶ Produtos:');
      products.forEach(product => {
        const seedType = product.seedTypeId?.name || 'Tipo desconhecido';
        const location = product.locationId?.code || 'Local desconhecido';
        console.log(` - ${product.name} (${seedType}) - ${product.quantity}un/${product.totalWeight}kg - ${location} - Status: ${product.status}`);
      });
    } else {
      console.log(' ‚ö†Ô∏è  Nenhum produto encontrado');
    }
    console.log();
    
    // MOVIMENTA√á√ïES
    console.log('üìù === MOVIMENTA√á√ïES ===');
    if (movementCount > 0) {
      const movements = await Movement.find()
        .limit(5)
        .populate('productId', 'name')
        .populate('userId', 'name')
        .populate('toLocationId', 'code')
        .sort({ timestamp: -1 });
        
      const movementsByType = await Movement.aggregate([
        { $group: { _id: '$type', count: { $sum: 1 } } }
      ]);
      
      console.log(' üìä Por Tipo:');
      movementsByType.forEach(mov => console.log(`   - ${mov._id}: ${mov.count}`));
      
      console.log(' üìù √öltimas Movimenta√ß√µes:');
      movements.forEach(movement => {
        const product = movement.productId?.name || 'Produto desconhecido';
        const user = movement.userId?.name || 'Usu√°rio desconhecido';
        const location = movement.toLocationId?.code || 'Local desconhecido';
        const date = new Date(movement.timestamp).toLocaleDateString('pt-BR');
        console.log(` - ${movement.type} | ${product} ‚Üí ${location} | por ${user} (${date})`);
      });
    } else {
      console.log(' ‚ö†Ô∏è  Nenhuma movimenta√ß√£o encontrada');
    }
    console.log();
    
    // ============================================================================
    // TESTE DE CONSULTAS SIMILARES √ÄS DO FRONTEND
    // ============================================================================
    
    console.log('üß™ === TESTE DE CONSULTAS DO FRONTEND ===');
    
    // Simular consulta de listagem de produtos (como o frontend faz)
    console.log('üì¶ Teste: Listagem de produtos (simulando frontend)');
    try {
      const productsQuery = await Product.find({})
        .populate('seedTypeId', 'name optimalTemperature optimalHumidity maxStorageTimeDays')
        .populate('locationId', 'code coordinates chamberId')
        .populate({
          path: 'locationId',
          populate: {
            path: 'chamberId',
            select: 'name status'
          }
        })
        .sort({ createdAt: -1 })
        .limit(3)
        .lean();
        
      console.log(`‚úÖ Consulta de produtos funcionando: ${productsQuery.length} produtos retornados`);
      
      // Testar estrutura da resposta
      if (productsQuery.length > 0) {
        const firstProduct = productsQuery[0];
        console.log(`   - Produto: ${firstProduct.name}`);
        console.log(`   - Tipo de Semente: ${firstProduct.seedTypeId?.name || 'N/A'}`);
        console.log(`   - Localiza√ß√£o: ${firstProduct.locationId?.code || 'N/A'}`);
        console.log(`   - C√¢mara: ${firstProduct.locationId?.chamberId?.name || 'N/A'}`);
      }
    } catch (error) {
      console.log(`‚ùå Erro na consulta de produtos: ${error.message}`);
    }
    
    // Simular consulta de listagem de c√¢maras
    console.log('\nüè≠ Teste: Listagem de c√¢maras (simulando frontend)');
    try {
      const chambersQuery = await Chamber.find({})
        .sort({ name: 1 })
        .limit(3);
        
      console.log(`‚úÖ Consulta de c√¢maras funcionando: ${chambersQuery.length} c√¢maras retornadas`);
      
      if (chambersQuery.length > 0) {
        const firstChamber = chambersQuery[0];
        console.log(`   - C√¢mara: ${firstChamber.name}`);
        console.log(`   - Status: ${firstChamber.status}`);
        console.log(`   - Dimens√µes: ${firstChamber.dimensions.quadras}x${firstChamber.dimensions.lados}x${firstChamber.dimensions.filas}x${firstChamber.dimensions.andares}`);
      }
    } catch (error) {
      console.log(`‚ùå Erro na consulta de c√¢maras: ${error.message}`);
    }
    
    // Simular consulta de localiza√ß√µes dispon√≠veis
    console.log('\nüìç Teste: Localiza√ß√µes dispon√≠veis (simulando frontend)');
    try {
      const availableLocations = await Location.find({ isOccupied: false })
        .populate('chamberId', 'name')
        .sort({ code: 1 })
        .limit(5);
        
      console.log(`‚úÖ Consulta de localiza√ß√µes dispon√≠veis funcionando: ${availableLocations.length} localiza√ß√µes dispon√≠veis`);
      
      if (availableLocations.length > 0) {
        availableLocations.forEach(loc => {
          console.log(`   - ${loc.code} (${loc.chamberId?.name || 'N/A'}) - Capacidade: ${loc.maxCapacityKg}kg`);
        });
      }
    } catch (error) {
      console.log(`‚ùå Erro na consulta de localiza√ß√µes dispon√≠veis: ${error.message}`);
    }
    
    // ============================================================================
    // TESTE DE INTEGRIDADE DOS DADOS
    // ============================================================================
    
    console.log('\nüîç === TESTE DE INTEGRIDADE DOS DADOS ===');
    
    // Verificar produtos √≥rf√£os (sem seedType ou location)
    const orphanProducts = await Product.countDocuments({
      $or: [
        { seedTypeId: { $exists: false } },
        { locationId: { $exists: false } }
      ]
    });
    
    if (orphanProducts > 0) {
      console.log(`‚ö†Ô∏è  ${orphanProducts} produtos √≥rf√£os encontrados (sem seedType ou location)`);
    } else {
      console.log('‚úÖ Todos os produtos t√™m seedType e location v√°lidos');
    }
    
    // Verificar localiza√ß√µes √≥rf√£s (sem c√¢mara)
    const orphanLocations = await Location.countDocuments({
      chamberId: { $exists: false }
    });
    
    if (orphanLocations > 0) {
      console.log(`‚ö†Ô∏è  ${orphanLocations} localiza√ß√µes √≥rf√£s encontradas (sem c√¢mara)`);
    } else {
      console.log('‚úÖ Todas as localiza√ß√µes t√™m c√¢mara v√°lida');
    }
    
    // Verificar consist√™ncia de ocupa√ß√£o
    const productsStored = await Product.countDocuments({ status: 'stored' });
    const locationsOccupied = await Location.countDocuments({ isOccupied: true });
    
    if (productsStored === locationsOccupied) {
      console.log(`‚úÖ Consist√™ncia de ocupa√ß√£o: ${productsStored} produtos armazenados = ${locationsOccupied} localiza√ß√µes ocupadas`);
    } else {
      console.log(`‚ö†Ô∏è  Inconsist√™ncia de ocupa√ß√£o: ${productsStored} produtos armazenados ‚â† ${locationsOccupied} localiza√ß√µes ocupadas`);
    }
    
    // ============================================================================
    // RESUMO FINAL
    // ============================================================================
    
    console.log('\nüéØ === RESUMO FINAL ===');
    console.log(`üìä Total de documentos: ${userCount + seedTypeCount + chamberCount + locationCount + productCount + movementCount}`);
    
    if (seedTypeCount > 0 && productCount > 0 && locationCount > 0) {
      console.log('‚úÖ Banco de dados com dados suficientes para testar o frontend');
    } else if (seedTypeCount > 0) {
      console.log('‚ö†Ô∏è  Apenas tipos de sementes encontrados - frontend parcialmente funcional');
    } else {
      console.log('‚ùå Banco de dados vazio - frontend n√£o funcionar√°');
    }
    
    await mongoose.connection.close();
    console.log('\nüîå Conex√£o fechada');
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
    console.error('Stack:', error.stack);
    process.exit(1);
  }
}

checkData(); 
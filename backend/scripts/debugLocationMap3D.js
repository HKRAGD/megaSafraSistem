const mongoose = require('mongoose');
const Chamber = require('../src/models/Chamber');
const Location = require('../src/models/Location');
const Product = require('../src/models/Product');

// Conectar ao MongoDB
mongoose.connect('mongodb://localhost:27017/sistema-sementes-test', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

const debugLocationMap3D = async () => {
  try {
    console.log('\nüîç DEBUG DO MAPA 3D - INVESTIGANDO LOCALIZA√á√ïES CINZAS\n');

    // 1. Buscar todas as c√¢maras
    console.log('1Ô∏è‚É£ C√ÇMARAS NO SISTEMA:');
    const chambers = await Chamber.find({ status: 'active' }).sort({ createdAt: 1 });
    
    for (const chamber of chambers) {
      console.log(`üì¶ ${chamber.name}:`);
      console.log(`   ID: ${chamber._id}`);
      console.log(`   Dimens√µes: ${chamber.dimensions.quadras}x${chamber.dimensions.lados}x${chamber.dimensions.filas}x${chamber.dimensions.andares}`);
      console.log(`   Total localiza√ß√µes: ${chamber.dimensions.quadras * chamber.dimensions.lados * chamber.dimensions.filas * chamber.dimensions.andares}`);
      console.log('');
    }

    // 2. Para cada c√¢mara, verificar localiza√ß√µes
    for (const chamber of chambers) {
      console.log(`\n2Ô∏è‚É£ AN√ÅLISE DETALHADA - ${chamber.name.toUpperCase()}:`);
      
      // Buscar todas as localiza√ß√µes desta c√¢mara
      const allLocations = await Location.find({ chamberId: chamber._id }).sort({ 
        'coordinates.quadra': 1,
        'coordinates.lado': 1,
        'coordinates.fila': 1,
        'coordinates.andar': 1
      });
      
      console.log(`üìç Total de localiza√ß√µes criadas: ${allLocations.length}`);
      
      // Verificar localiza√ß√µes esperadas vs criadas
      const expectedTotal = chamber.dimensions.quadras * chamber.dimensions.lados * chamber.dimensions.filas * chamber.dimensions.andares;
      console.log(`üéØ Localiza√ß√µes esperadas: ${expectedTotal}`);
      console.log(`‚öñÔ∏è Diferen√ßa: ${expectedTotal - allLocations.length} (${allLocations.length < expectedTotal ? 'FALTANDO' : 'OK'})`);
      
      // Verificar disponibilidade
      const availableLocations = allLocations.filter(loc => !loc.isOccupied);
      const occupiedLocations = allLocations.filter(loc => loc.isOccupied);
      
      console.log(`‚úÖ Dispon√≠veis: ${availableLocations.length}`);
      console.log(`üî¥ Ocupadas: ${occupiedLocations.length}`);
      
      // Verificar produtos
      const productsInChamber = await Product.find({ 
        locationId: { $in: allLocations.map(loc => loc._id) },
        status: 'stored'
      }).populate('locationId');
      
      console.log(`üì¶ Produtos armazenados: ${productsInChamber.length}`);
      
      // Analisar primeiro andar em detalhes
      console.log(`\nüìã AN√ÅLISE DO ANDAR 1:`);
      const firstFloorLocations = allLocations.filter(loc => loc.coordinates.andar === 1);
      console.log(`üìç Localiza√ß√µes no andar 1: ${firstFloorLocations.length}`);
      
      const firstFloorExpected = chamber.dimensions.quadras * chamber.dimensions.lados * chamber.dimensions.filas;
      console.log(`üéØ Esperadas no andar 1: ${firstFloorExpected}`);
      
      // Mapear grid do andar 1
      console.log(`\nüó∫Ô∏è GRID DO ANDAR 1 (${chamber.name}):`);
      console.log('Legenda: ‚úÖ = Dispon√≠vel, üî¥ = Ocupada, ‚ö™ = N√£o existe');
      console.log('');
      
      for (let q = 1; q <= chamber.dimensions.quadras; q++) {
        let row = `Q${q}: `;
        for (let l = 1; l <= chamber.dimensions.lados; l++) {
          for (let f = 1; f <= chamber.dimensions.filas; f++) {
            const location = firstFloorLocations.find(loc => 
              loc.coordinates.quadra === q &&
              loc.coordinates.lado === l &&
              loc.coordinates.fila === f
            );
            
            if (!location) {
              row += '‚ö™ ';
            } else if (location.isOccupied) {
              row += 'üî¥ ';
            } else {
              row += '‚úÖ ';
            }
          }
          row += ' | ';
        }
        console.log(row);
      }
      
      // Verificar se h√° localiza√ß√µes faltando
      const missingLocations = [];
      for (let q = 1; q <= chamber.dimensions.quadras; q++) {
        for (let l = 1; l <= chamber.dimensions.lados; l++) {
          for (let f = 1; f <= chamber.dimensions.filas; f++) {
            for (let a = 1; a <= chamber.dimensions.andares; a++) {
              const exists = allLocations.find(loc => 
                loc.coordinates.quadra === q &&
                loc.coordinates.lado === l &&
                loc.coordinates.fila === f &&
                loc.coordinates.andar === a
              );
              
              if (!exists) {
                missingLocations.push({ q, l, f, a });
              }
            }
          }
        }
      }
      
      if (missingLocations.length > 0) {
        console.log(`\n‚ö†Ô∏è LOCALIZA√á√ïES FALTANDO (${missingLocations.length}):`);
        missingLocations.slice(0, 10).forEach(({ q, l, f, a }) => {
          console.log(`   Q${q}-L${l}-F${f}-A${a}`);
        });
        if (missingLocations.length > 10) {
          console.log(`   ... e mais ${missingLocations.length - 10} localiza√ß√µes`);
        }
      }
      
      console.log('\n' + '='.repeat(80));
    }

    // 3. Testar endpoint da API
    console.log('\n3Ô∏è‚É£ TESTANDO ENDPOINT /api/locations/available:');
    
    // Simular chamada da API
    const availableLocations = await Location.find({ isOccupied: false })
      .populate('chamberId', 'name dimensions')
      .sort({ 'coordinates.quadra': 1, 'coordinates.lado': 1, 'coordinates.fila': 1, 'coordinates.andar': 1 });
    
    console.log(`üìä Total de localiza√ß√µes dispon√≠veis: ${availableLocations.length}`);
    
    // Agrupar por c√¢mara
    const locationsByChamber = {};
    availableLocations.forEach(loc => {
      const chamberName = loc.chamberId ? loc.chamberId.name : 'C√¢mara desconhecida';
      if (!locationsByChamber[chamberName]) {
        locationsByChamber[chamberName] = [];
      }
      locationsByChamber[chamberName].push(loc);
    });
    
    Object.keys(locationsByChamber).forEach(chamberName => {
      const locs = locationsByChamber[chamberName];
      console.log(`üì¶ ${chamberName}: ${locs.length} localiza√ß√µes dispon√≠veis`);
      
      // Mostrar algumas localiza√ß√µes de exemplo
      locs.slice(0, 5).forEach(loc => {
        console.log(`   ${loc.code} - Ocupado: ${loc.isOccupied} - Capacidade: ${loc.currentWeightKg}/${loc.maxCapacityKg}kg`);
      });
      if (locs.length > 5) {
        console.log(`   ... e mais ${locs.length - 5} localiza√ß√µes`);
      }
    });

    // 4. Verificar produtos √≥rf√£os
    console.log('\n4Ô∏è‚É£ VERIFICANDO CONSIST√äNCIA:');
    
    const allProducts = await Product.find({ status: 'stored' }).populate('locationId');
    const orphanProducts = allProducts.filter(product => !product.locationId);
    
    if (orphanProducts.length > 0) {
      console.log(`‚ö†Ô∏è ${orphanProducts.length} produtos sem localiza√ß√£o encontrados!`);
    } else {
      console.log(`‚úÖ Todos os produtos t√™m localiza√ß√£o v√°lida`);
    }
    
    // Verificar localiza√ß√µes inconsistentes
    const inconsistentLocations = await Location.find({
      $expr: {
        $ne: ['$isOccupied', { $gt: ['$currentWeightKg', 0] }]
      }
    });
    
    if (inconsistentLocations.length > 0) {
      console.log(`‚ö†Ô∏è ${inconsistentLocations.length} localiza√ß√µes com estado inconsistente!`);
      inconsistentLocations.forEach(loc => {
        console.log(`   ${loc.code}: isOccupied=${loc.isOccupied}, currentWeight=${loc.currentWeightKg}kg`);
      });
    } else {
      console.log(`‚úÖ Todas as localiza√ß√µes t√™m estado consistente`);
    }

    console.log('\n‚úÖ DEBUG COMPLETO!');
    console.log('\nüí° POSS√çVEIS CAUSAS DAS LOCALIZA√á√ïES CINZAS:');
    console.log('1. Localiza√ß√µes n√£o foram criadas (gerar localiza√ß√µes para a c√¢mara)');
    console.log('2. Problema no filtro de localiza√ß√µes dispon√≠veis');
    console.log('3. Dados inconsistentes entre isOccupied e currentWeight');
    console.log('4. Problema na API que n√£o est√° populando dados da c√¢mara');
    console.log('5. Filtro de capacidade muito restritivo no frontend');

  } catch (error) {
    console.error('‚ùå Erro no debug:', error);
  } finally {
    mongoose.connection.close();
  }
};

debugLocationMap3D(); 
/**
 * Inicializa√ß√£o do Sistema de Debug para Chips
 * 
 * Este arquivo ativa automaticamente o sistema de debug avan√ßado para
 * componentes Chip do Material-UI em ambiente de desenvolvimento.
 * 
 * FUNCIONALIDADES:
 * - Interceptador global de erros "onClick is not a function"
 * - Monitoramento de DOM em tempo real
 * - Fun√ß√µes de debug dispon√≠veis no console
 * - Logs detalhados para identificar problemas
 */

import { 
  installChipErrorHandler, 
  startChipMonitoring, 
  testChipIssues,
  isChipErrorHandlerInstalled 
} from './chipUtils';

/**
 * Ativa o sistema de debug completo para Chips
 * S√≥ √© executado em ambiente de desenvolvimento
 */
export const initializeChipDebugSystem = () => {
  // S√≥ ativar em desenvolvimento
  if (process.env.NODE_ENV !== 'development') {
    return;
  }

  console.log('üîß [ChipDebug] Inicializando sistema de debug para Material-UI Chips...');

  try {
    // 1. Instalar interceptador de erros
    if (!isChipErrorHandlerInstalled()) {
      installChipErrorHandler();
      console.log('‚úÖ [ChipDebug] Interceptador de erros instalado');
    } else {
      console.log('‚ÑπÔ∏è [ChipDebug] Interceptador j√° estava instalado');
    }

    // 2. Iniciar monitoramento de DOM
    const stopMonitoring = startChipMonitoring();
    console.log('‚úÖ [ChipDebug] Monitoramento de DOM iniciado');

    // 3. Disponibilizar fun√ß√£o de teste no console global
    if (typeof window !== 'undefined') {
      (window as any).testChipIssues = testChipIssues;
      (window as any).debugChips = () => {
        console.log('üß™ [ChipDebug] Executando diagn√≥stico completo...');
        testChipIssues();
      };
      console.log('‚úÖ [ChipDebug] Fun√ß√µes de debug dispon√≠veis no console:');
      console.log('   - testChipIssues() : Executa diagn√≥stico completo');
      console.log('   - debugChips() : Alias para testChipIssues()');
    }

    // 4. Log de status final
    console.log('üéØ [ChipDebug] Sistema de debug completamente ativo!');
    console.log('üìã [ChipDebug] Para diagnosticar problemas, execute: testChipIssues()');
    
    // 5. Sistema pronto - teste dispon√≠vel manualmente
    console.log('üîç [ChipDebug] Sistema pronto! Execute testChipIssues() manualmente se necess√°rio.');

    // 6. Retornar fun√ß√£o de cleanup (opcional)
    return {
      stop: () => {
        if (stopMonitoring) stopMonitoring();
        console.log('üõë [ChipDebug] Sistema de debug desativado');
      }
    };

  } catch (error) {
    console.error('‚ùå [ChipDebug] Erro ao inicializar sistema de debug:', error);
  }
};

/**
 * Configura√ß√£o autom√°tica para projetos React
 * Detecta se est√° em ambiente React e inicializa automaticamente
 */
export const autoInitializeIfDevelopment = () => {
  if (process.env.NODE_ENV === 'development') {
    // Aguardar um pouco para garantir que o DOM est√° pronto
    if (typeof window !== 'undefined') {
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeChipDebugSystem);
      } else {
        // DOM j√° est√° pronto
        setTimeout(initializeChipDebugSystem, 100);
      }
    }
  }
};

/**
 * Informa√ß√µes do sistema de debug
 */
export const getDebugSystemInfo = () => {
  return {
    isProduction: process.env.NODE_ENV === 'production',
    isDevelopment: process.env.NODE_ENV === 'development',
    isHandlerInstalled: isChipErrorHandlerInstalled(),
    hasTestFunction: typeof (window as any)?.testChipIssues === 'function',
    timestamp: new Date().toISOString(),
    version: '1.0.0'
  };
};

// Auto-inicializa√ß√£o para ambientes de desenvolvimento
autoInitializeIfDevelopment(); 
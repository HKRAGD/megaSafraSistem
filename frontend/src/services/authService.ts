import { 
  LoginFormData, 
  RegisterFormData, 
  User, 
  ApiResponse,
  AuthResponse 
} from '../types';
import { apiPost, apiGet } from './api';

// ============================================================================
// AUTH SERVICE - Sistema de Autentica√ß√£o
// ============================================================================

/**
 * Service respons√°vel por todas as opera√ß√µes de autentica√ß√£o
 * REGRA CR√çTICA: NUNCA usar localStorage/sessionStorage - apenas React state via callbacks
 * 
 * Este service trabalha com callbacks do AuthContext para gerenciar estado
 * Endpoints baseados na documenta√ß√£o: /api/auth/*
 */

// Callbacks para integra√ß√£o com AuthContext
let authCallbacks: {
  setUser: ((user: User | null) => void) | null;
  setTokens: ((accessToken: string, refreshToken?: string) => void) | null;
  clearAuth: (() => void) | null;
  getRefreshToken: (() => string | null) | null;
} = {
  setUser: null,
  setTokens: null,
  clearAuth: null,
  getRefreshToken: null,
};

/**
 * Configurar callbacks do AuthContext
 * Chamado pelo AuthContext durante inicializa√ß√£o
 */
export const setAuthCallbacks = (callbacks: {
  setUser: (user: User | null) => void;
  setTokens: (accessToken: string, refreshToken?: string) => void;
  clearAuth: () => void;
  getRefreshToken: () => string | null;
}): void => {
  authCallbacks = callbacks;
};

export const authService = {
  /**
   * Realizar login do usu√°rio
   * POST /api/auth/login
   * 
   * SISTEMA INTERNO: Usar localStorage para persist√™ncia completa
   */
  login: async (credentials: LoginFormData): Promise<ApiResponse<AuthResponse>> => {
    try {
      const response = await apiPost<ApiResponse<AuthResponse>>('/auth/login', credentials);
      
      // Usar callbacks do AuthContext para gerenciar estado
      if (response.success && response.data) {
        const { user, accessToken, refreshToken } = response.data;
        
        // SISTEMA INTERNO: Persistir dados completos para recupera√ß√£o
        const sessionData = {
          user: {
            id: user.id,
            name: user.name,
            email: user.email,
            role: user.role,
            isActive: user.isActive
          },
          accessToken,
          refreshToken: refreshToken || null,
          loginTime: new Date().toISOString(),
          expiresIn: response.data.expiresIn || '7d'
        };
        
        console.log('üíæ Dados a serem salvos:', {
          userInfo: { id: user.id, name: user.name, email: user.email },
          hasAccessToken: !!accessToken,
          hasRefreshToken: !!sessionData.refreshToken,
          loginTime: sessionData.loginTime
        });
        
        try {
          localStorage.setItem('userSession', JSON.stringify(sessionData));
          console.log('‚úÖ Sess√£o completa persistida para sistema interno:', user.name);
          
          // üîç DEBUG: Verificar se foi salvo corretamente
          const savedVerification = localStorage.getItem('userSession');
          if (savedVerification) {
            console.log('‚úÖ Verifica√ß√£o: dados salvos corretamente no localStorage');
            console.log('üìä Tamanho dos dados salvos:', savedVerification.length, 'caracteres');
            
            // Verificar se consegue fazer parse dos dados salvos
            try {
              const parsedData = JSON.parse(savedVerification);
              console.log('‚úÖ Parse test successful:', {
                hasUser: !!parsedData.user,
                hasAccessToken: !!parsedData.accessToken,
                userName: parsedData.user?.name
              });
            } catch (parseError) {
              console.error('‚ùå ERRO: dados salvos est√£o corrompidos!', parseError);
            }
          } else {
            console.log('‚ùå ERRO CR√çTICO: dados n√£o foram salvos no localStorage!');
          }
        } catch (storageError: any) {
          console.error('‚ùå ERRO ao salvar no localStorage:', storageError);
          // Continuar mesmo com erro de localStorage (modo degradado)
        }
        
        // Notificar AuthContext sobre login bem-sucedido
        if (authCallbacks.setUser) {
          authCallbacks.setUser(user);
        }
        
        if (authCallbacks.setTokens) {
          authCallbacks.setTokens(accessToken, refreshToken);
        }
        
        console.log('‚úÖ Login realizado com sucesso:', user.name);
      }
      
      return response;
    } catch (error: any) {
      console.error('‚ùå Erro no login:', error);
      throw error;
    }
  },

  /**
   * Registrar novo usu√°rio (apenas admin)
   * POST /api/auth/register
   */
  register: async (userData: RegisterFormData): Promise<ApiResponse<AuthResponse>> => {
    try {
      const response = await apiPost<ApiResponse<AuthResponse>>('/auth/register', userData);
      
      if (response.success && response.data) {
        console.log('‚úÖ Usu√°rio registrado com sucesso:', response.data.user.name);
      }
      
      return response;
    } catch (error: any) {
      console.error('‚ùå Erro no registro:', error);
      throw error;
    }
  },

  /**
   * Renovar access token
   * POST /api/auth/refresh
   * 
   * SISTEMA INTERNO: Usar dados salvos no localStorage
   */
  refreshToken: async (): Promise<string | null> => {
    try {
      // 1. Tentar obter refresh token via callback do AuthContext
      let refreshToken = authCallbacks.getRefreshToken ? authCallbacks.getRefreshToken() : null;
      
      // 2. Fallback: tentar obter da sess√£o salva
      if (!refreshToken) {
        const savedSession = localStorage.getItem('userSession');
        if (savedSession) {
          const sessionData = JSON.parse(savedSession);
          refreshToken = sessionData.refreshToken;
          console.log('üîÑ Usando refresh token da sess√£o salva');
        }
      }
      
      if (!refreshToken) {
        throw new Error('Refresh token n√£o encontrado');
      }

      const response = await apiPost<ApiResponse<{ accessToken: string; expiresIn: string }>>('/auth/refresh', {
        refreshToken
      });
      
      if (response.success && response.data) {
        const { accessToken } = response.data;
        
        // Atualizar sess√£o salva com novo access token
        const savedSession = localStorage.getItem('userSession');
        if (savedSession) {
          const sessionData = JSON.parse(savedSession);
          sessionData.accessToken = accessToken;
          sessionData.loginTime = new Date().toISOString(); // Atualizar tempo
          localStorage.setItem('userSession', JSON.stringify(sessionData));
        }
        
        // Notificar AuthContext sobre novo token
        if (authCallbacks.setTokens) {
          authCallbacks.setTokens(accessToken, refreshToken);
        }
        
        console.log('‚úÖ Token renovado com sucesso e sess√£o atualizada');
        return accessToken;
      }
      
      throw new Error('Resposta inv√°lida do servidor');
    } catch (error: any) {
      console.error('‚ùå Erro ao renovar token:', error);
      
      // Se falhou ao renovar, limpar tudo
      localStorage.removeItem('userSession');
      localStorage.removeItem('refreshToken');
      if (authCallbacks.clearAuth) {
        authCallbacks.clearAuth();
      }
      
      return null;
    }
  },

  /**
   * Realizar logout
   * POST /api/auth/logout
   * 
   * SISTEMA INTERNO: Limpar AuthContext + localStorage completo
   */
  logout: async (): Promise<void> => {
    try {
      // Tentar notificar o servidor sobre logout
      await apiPost('/auth/logout', {});
      console.log('‚úÖ Logout realizado com sucesso no servidor');
    } catch (error: any) {
      console.error('‚ùå Erro no logout do servidor (ignorado):', error);
      // Continuar mesmo com erro na API
    } finally {
      // Limpar sess√£o completa do localStorage
      localStorage.removeItem('userSession');
      localStorage.removeItem('refreshToken'); // Compatibilidade com vers√£o anterior
      console.log('üóëÔ∏è Sess√£o completa removida do localStorage');
      
      // Sempre limpar via callback do AuthContext
      if (authCallbacks.clearAuth) {
        authCallbacks.clearAuth();
        console.log('‚úÖ Estado de autentica√ß√£o limpo via AuthContext');
      }
    }
  },

  /**
   * Recuperar sess√£o do usu√°rio ap√≥s reload da p√°gina
   * SISTEMA INTERNO: M√©todo robusto com valida√ß√£o de token no servidor
   */
  recoverSession: async (): Promise<{ user: User; accessToken: string; refreshToken: string } | null> => {
    try {
      console.log('üîÑ Tentando recuperar sess√£o do sistema interno...');
      
      // 1. Verificar se h√° sess√£o salva no localStorage
      const savedSession = localStorage.getItem('userSession');
      if (!savedSession) {
        console.log('‚ùå Nenhuma sess√£o encontrada no localStorage');
        return null;
      }
      
      // 2. Parse dos dados da sess√£o
      let sessionData;
      try {
        sessionData = JSON.parse(savedSession);
      } catch (parseError) {
        console.log('‚ùå Dados de sess√£o corrompidos');
        localStorage.removeItem('userSession');
        return null;
      }
      
      const { user, accessToken, refreshToken, loginTime } = sessionData;
      
      // 3. Verificar se dados est√£o completos com logs detalhados
      console.log('üîç Verificando dados da sess√£o:', {
        hasUser: !!user,
        userDetails: user ? { id: user.id, name: user.name, email: user.email } : null,
        hasAccessToken: !!accessToken,
        accessTokenLength: accessToken?.length || 0,
        hasRefreshToken: !!refreshToken,
        refreshTokenLength: refreshToken?.length || 0,
        loginTime
      });
      
      if (!user || !user.id || !user.name || !user.email) {
        console.log('‚ùå Dados de usu√°rio incompletos:', { 
          hasUser: !!user, 
          userId: user?.id, 
          userName: user?.name, 
          userEmail: user?.email 
        });
        localStorage.removeItem('userSession');
        return null;
      }
      
      if (!accessToken || accessToken.length < 10) {
        console.log('‚ùå Access token inv√°lido:', { 
          hasToken: !!accessToken, 
          tokenLength: accessToken?.length 
        });
        localStorage.removeItem('userSession');
        return null;
      }
      
      // Note: refreshToken pode vir do backend ou ser null inicialmente
      console.log('‚úÖ Dados de sess√£o validados com sucesso');
      
      // 4. Configurar token temporariamente para testar validade
      const { setAuthToken } = await import('./api');
      setAuthToken(accessToken);
      
      // 5. Validar token no servidor verificando user data
      try {
        console.log('üîç Validando token no servidor...');
        const currentUser = await authService.getCurrentUser();
        
        if (!currentUser || currentUser.id !== user.id) {
          console.log('‚ùå Token inv√°lido ou usu√°rio n√£o encontrado');
          localStorage.removeItem('userSession');
          setAuthToken(null);
          return null;
        }
        
        console.log('‚úÖ Token v√°lido! Sess√£o recuperada:', currentUser.name);
        return { user: currentUser, accessToken, refreshToken };
        
      } catch (tokenError: any) {
        console.log('‚ùå Token expirado, tentando renovar...');
        
        // 6. Tentar renovar token se expirado
        try {
          const response = await apiPost<ApiResponse<{ accessToken: string; expiresIn: string }>>('/auth/refresh', {
            refreshToken
          });
          
          if (response.success && response.data) {
            const newAccessToken = response.data.accessToken;
            
            // Atualizar sess√£o com novo token
            const updatedSession = {
              ...sessionData,
              accessToken: newAccessToken,
              loginTime: new Date().toISOString()
            };
            localStorage.setItem('userSession', JSON.stringify(updatedSession));
            
            // Configurar novo token
            setAuthToken(newAccessToken);
            
            // Verificar usu√°rio com novo token
            const currentUser = await authService.getCurrentUser();
            if (currentUser) {
              console.log('‚úÖ Token renovado e sess√£o recuperada:', currentUser.name);
              return { user: currentUser, accessToken: newAccessToken, refreshToken };
            }
          }
          
          throw new Error('Falha ao renovar token');
          
        } catch (refreshError: any) {
          console.log('‚ùå Falha ao renovar token:', refreshError);
          localStorage.removeItem('userSession');
          setAuthToken(null);
          return null;
        }
      }
      
    } catch (error: any) {
      console.error('‚ùå Erro na recupera√ß√£o de sess√£o:', error);
      // Limpar dados corrompidos
      localStorage.removeItem('userSession');
      const { setAuthToken } = await import('./api');
      setAuthToken(null);
      return null;
    }
  },

  /**
   * Verificar se usu√°rio est√° autenticado e obter dados
   * GET /api/auth/security-info
   * 
   * Usado para recuperar sess√£o ap√≥s reload da p√°gina
   */
  getCurrentUser: async (): Promise<User | null> => {
    try {
      const response = await apiGet<ApiResponse<{
        sessionId: string;
        loginAttempts: number;
        lastLogin: string;
        activeSessions: number;
        user?: User;
      }>>('/auth/security-info');
      
      if (response.success && response.data.user) {
        console.log('‚úÖ Usu√°rio autenticado encontrado:', response.data.user.name);
        return response.data.user;
      }
      
      return null;
    } catch (error: any) {
      console.error('‚ùå Erro ao verificar usu√°rio autenticado:', error);
      return null;
    }
  },

  /**
   * Obter informa√ß√µes de seguran√ßa do usu√°rio
   * GET /api/auth/security-info
   */
  getSecurityInfo: async (): Promise<ApiResponse<{
    sessionId: string;
    loginAttempts: number;
    lastLogin: string;
    activeSessions: number;
  }>> => {
    try {
      const response = await apiGet<ApiResponse<{
        sessionId: string;
        loginAttempts: number;
        lastLogin: string;
        activeSessions: number;
      }>>('/auth/security-info');
      
      return response;
    } catch (error: any) {
      console.error('‚ùå Erro ao obter informa√ß√µes de seguran√ßa:', error);
      throw error;
    }
  },

  /**
   * Revogar todas as sess√µes do usu√°rio
   * POST /api/auth/revoke-sessions
   */
  revokeSessions: async (): Promise<ApiResponse<{ revokedSessions: number }>> => {
    try {
      const response = await apiPost<ApiResponse<{ revokedSessions: number }>>('/auth/revoke-sessions', {});
      
      if (response.success && response.data) {
        console.log('‚úÖ Sess√µes revogadas:', response.data.revokedSessions);
      }
      
      return response;
    } catch (error: any) {
      console.error('‚ùå Erro ao revogar sess√µes:', error);
      throw error;
    }
  }
};

export default authService; 
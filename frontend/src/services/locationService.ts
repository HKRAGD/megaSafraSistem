import { Location, LocationFilters, ApiResponse, LocationsResponse } from '../types';
import { apiGet, apiPost, apiPut } from './api';

/**
 * Service para opera√ß√µes com localiza√ß√µes
 */
export const locationService = {
  getAll: async (filters?: LocationFilters): Promise<ApiResponse<LocationsResponse>> => {
    return apiGet<ApiResponse<LocationsResponse>>('/locations', { params: filters });
  },

  /**
   * Busca TODAS as localiza√ß√µes sem limita√ß√£o de pagina√ß√£o
   * √ötil para o mapa 3D que precisa mostrar todas as localiza√ß√µes
   */
  getAllUnpaginated: async (filters?: LocationFilters): Promise<ApiResponse<{ locations: Location[] }>> => {
    const allFilters = {
      ...filters,
      limit: 10000, // Limite alto para garantir que pegue todas
      page: 1
    };
    
    try {
      console.log('üîç locationService.getAllUnpaginated: Iniciando busca de todas as localiza√ß√µes...');
      
      const response = await apiGet<ApiResponse<LocationsResponse>>('/locations', { params: allFilters });
      
      console.log(`üì¶ Primeira p√°gina: ${response.data.locations.length} localiza√ß√µes`);
      console.log(`üìä Pagina√ß√£o:`, response.data.pagination);
      
      // Se ainda h√° mais p√°ginas, buscar todas
      if (response.data.pagination && response.data.pagination.hasNextPage) {
        console.log(`üîÑ Detectadas m√∫ltiplas p√°ginas! Buscando todas as ${response.data.pagination.totalItems} localiza√ß√µes...`);
        
        const allLocations: Location[] = [...response.data.locations];
        const totalPages = response.data.pagination.totalPages;
        
        console.log(`üìÑ Total de p√°ginas a buscar: ${totalPages}`);
        
        // Buscar p√°ginas restantes
        const remainingRequests = [];
        for (let page = 2; page <= totalPages; page++) {
          remainingRequests.push(
            apiGet<ApiResponse<LocationsResponse>>('/locations', { 
              params: { ...allFilters, page } 
            })
          );
        }
        
        console.log(`üöÄ Executando ${remainingRequests.length} requisi√ß√µes em paralelo...`);
        
        // Executar todas as requisi√ß√µes em paralelo
        const remainingResponses = await Promise.all(remainingRequests);
        
        // Concatenar todas as localiza√ß√µes
        remainingResponses.forEach((pageResponse, index) => {
          console.log(`üìÑ P√°gina ${index + 2}: ${pageResponse.data.locations.length} localiza√ß√µes`);
          allLocations.push(...pageResponse.data.locations);
        });
        
        console.log(`‚úÖ SUCESSO: ${allLocations.length} localiza√ß√µes carregadas de ${totalPages} p√°ginas`);
        
        return {
          success: true,
          data: { locations: allLocations },
          message: `${allLocations.length} localiza√ß√µes carregadas (${totalPages} p√°ginas)`
        };
      }
      
      // Se tem apenas uma p√°gina, retornar diretamente
      console.log(`‚úÖ P√°gina √∫nica: ${response.data.locations.length} localiza√ß√µes carregadas`);
      return {
        success: true,
        data: { locations: response.data.locations },
        message: `${response.data.locations.length} localiza√ß√µes carregadas (1 p√°gina)`
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao buscar todas as localiza√ß√µes:', error);
      throw error;
    }
  },

  getByChamber: async (chamberId: string): Promise<ApiResponse<LocationsResponse>> => {
    return apiGet<ApiResponse<LocationsResponse>>(`/locations/chamber/${chamberId}`);
  },

  getAvailable: async (filters?: LocationFilters): Promise<ApiResponse<LocationsResponse>> => {
    return apiGet<ApiResponse<LocationsResponse>>('/locations/available', { params: filters });
  },

  getById: async (id: string): Promise<ApiResponse<Location>> => {
    return apiGet<ApiResponse<Location>>(`/locations/${id}`);
  },

  update: async (id: string, data: Partial<Location>): Promise<ApiResponse<Location>> => {
    return apiPut<ApiResponse<Location>>(`/locations/${id}`, data);
  }
};

export default locationService; 
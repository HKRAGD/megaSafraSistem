import { useState, useEffect, useCallback } from 'react';
import { 
  Product, 
  ProductWithRelations,
  ProductFilters, 
  CreateProductFormData, 
  MoveProductFormData,
  UseDataState 
} from '../types';
import { productService } from '../services/productService';

// ============================================================================
// FUN√á√ÉO DE MAPEAMENTO DE DADOS DA API
// ============================================================================

/**
 * Converte os dados de produto da API para o formato ProductWithRelations
 * API retorna: { seedTypeId: { _id, name, ... }, locationId: { _id, code, chamberId: { _id, name, ... }, ... } }
 * Frontend espera: { seedType: { id, name }, location: { id, code, chamber: { id, name } } }
 */
const mapApiProductToProductWithRelations = (apiProduct: any): ProductWithRelations => {
  // üîÑ Mapear dados da API para formato ProductWithRelations
  
  const mapped = {
    // Dados b√°sicos do produto
    id: apiProduct._id || apiProduct.id,
    name: apiProduct.name,
    lot: apiProduct.lot,
    seedTypeId: (() => {
      const seedTypeData = apiProduct.seedType || apiProduct.seedTypeId;
      return typeof seedTypeData === 'object' ? (seedTypeData._id || seedTypeData.id) : seedTypeData;
    })(),
    quantity: apiProduct.quantity,
    storageType: apiProduct.storageType,
    weightPerUnit: apiProduct.weightPerUnit,
    totalWeight: apiProduct.totalWeight || apiProduct.calculatedTotalWeight,
    locationId: (() => {
      const locationData = apiProduct.location || apiProduct.locationId;
      return typeof locationData === 'object' ? (locationData._id || locationData.id) : locationData;
    })(),
    entryDate: apiProduct.entryDate,
    expirationDate: apiProduct.expirationDate,
    status: apiProduct.status,
    notes: apiProduct.notes,
    tracking: apiProduct.tracking,
    metadata: apiProduct.metadata,
    calculatedTotalWeight: apiProduct.calculatedTotalWeight || apiProduct.totalWeight,
    isNearExpiration: apiProduct.isNearExpiration || false,
    expirationStatus: apiProduct.expirationStatus || 'good',
    storageTimeDays: apiProduct.storageTimeDays || 0,
    createdAt: apiProduct.createdAt,
    updatedAt: apiProduct.updatedAt,

    // Relacionamentos mapeados - Lidar com diferentes estruturas da API
    seedType: (() => {
      // A API pode retornar tanto seedType quanto seedTypeId
      const seedTypeData = apiProduct.seedType || apiProduct.seedTypeId;
      if (seedTypeData && typeof seedTypeData === 'object') {
        return {
          id: seedTypeData._id || seedTypeData.id,
          name: seedTypeData.name,
        };
      }
      return undefined;
    })(),

    location: (() => {
      // A API pode retornar tanto location quanto locationId
      const locationData = apiProduct.location || apiProduct.locationId;
      if (locationData && typeof locationData === 'object') {
        return {
          id: locationData._id || locationData.id,
          code: locationData.code,
          maxCapacityKg: locationData.maxCapacityKg,
          currentWeightKg: locationData.currentWeightKg,
          chamber: (() => {
            // A c√¢mara pode estar em chamberId ou diretamente em chamber
            const chamberData = locationData.chamberId || locationData.chamber;
            if (chamberData && typeof chamberData === 'object') {
              return {
                id: chamberData._id || chamberData.id,
                name: chamberData.name,
              };
            }
            return undefined;
          })(),
        };
      }
      return undefined;
    })(),
  };

  // ‚úÖ Retornar produto mapeado
  
  return mapped;
};

// ============================================================================
// INTERFACE DO HOOK
// ============================================================================

interface UseProductsOptions {
  autoFetch?: boolean;
  initialFilters?: ProductFilters;
}

interface UseProductsReturn extends UseDataState<ProductWithRelations> {
  // Estado adicional espec√≠fico
  selectedProduct: ProductWithRelations | null;
  filters: ProductFilters;
  totalItems: number; // Getter conveniente para total
  
  // Opera√ß√µes CRUD
  fetchProducts: (newFilters?: ProductFilters) => Promise<void>;
  createProduct: (productData: CreateProductFormData) => Promise<void>;
  updateProduct: (id: string, productData: Partial<CreateProductFormData>) => Promise<void>;
  deleteProduct: (id: string) => Promise<void>;
  
  // Opera√ß√µes especiais
  moveProduct: (id: string, moveData: MoveProductFormData) => Promise<void>;
  getProduct: (id: string) => Promise<ProductWithRelations | null>;
  
  // Novas opera√ß√µes avan√ßadas
  partialExit: (id: string, quantity: number, reason: string) => Promise<void>;
  partialMove: (id: string, quantity: number, newLocationId: string, reason: string) => Promise<void>;
  addStock: (id: string, quantity: number, reason: string, weightPerUnit?: number) => Promise<void>;
  
  // An√°lises e valida√ß√µes
  getDistributionAnalysis: () => Promise<any>;
  validateProductData: (productData: CreateProductFormData) => Promise<any>;
  findOptimalLocation: (productData: any) => Promise<any>;
  
  // Controle de estado
  setSelectedProduct: (product: ProductWithRelations | null) => void;
  setFilters: (filters: ProductFilters) => void;
  clearError: () => void;
  refetch: () => Promise<void>;
}

// ============================================================================
// HOOK IMPLEMENTATION
// ============================================================================

/**
 * Hook para gerenciar todos os dados e opera√ß√µes relacionadas a produtos
 * 
 * REGRA CR√çTICA: Este √© o √öNICO lugar onde requisi√ß√µes de produtos devem ser feitas!
 * NUNCA fazer requisi√ß√µes HTTP relacionadas a produtos fora deste hook!
 */
export const useProducts = (options: UseProductsOptions = {}): UseProductsReturn => {
  const { autoFetch = true, initialFilters = {} } = options;

  // ============================================================================
  // ESTADO LOCAL
  // ============================================================================

  const [data, setData] = useState<ProductWithRelations[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [total, setTotal] = useState<number>(0);
  const [currentPage, setCurrentPage] = useState<number>(1);
  const [totalPages, setTotalPages] = useState<number>(1);
  const [hasNextPage, setHasNextPage] = useState<boolean>(false);
  const [hasPrevPage, setHasPrevPage] = useState<boolean>(false);
  
  // Estado espec√≠fico de produtos
  const [selectedProduct, setSelectedProduct] = useState<ProductWithRelations | null>(null);
  const [filters, setFilters] = useState<ProductFilters>(initialFilters);

  // ============================================================================
  // FUN√á√ïES AUXILIARES
  // ============================================================================

  const handleError = useCallback((error: any, operation: string) => {
    const errorMessage = error.response?.data?.message || `Erro ao ${operation}`;
    setError(errorMessage);
    console.error(`‚ùå ${operation}:`, error);
  }, []);

  const clearError = useCallback(() => {
    setError(null);
  }, []);

  // ============================================================================
  // OPERA√á√ïES CRUD
  // ============================================================================

  /**
   * Buscar produtos com filtros
   */
  const fetchProducts = useCallback(async (newFilters?: ProductFilters): Promise<void> => {
    setLoading(true);
    clearError();

    try {
      const appliedFilters = newFilters || filters;
      const response = await productService.getAll(appliedFilters);
      
      // Estrutura correta da API: { success: true, data: { products: [...], pagination: {...} } }
      const apiProducts = response.data.products || [];
      const pagination = response.data.pagination || {};
      
      // üîÑ MAPEAR dados da API para formato ProductWithRelations
      const mappedProducts = apiProducts.map(mapApiProductToProductWithRelations);
      
      setData(mappedProducts);
      setTotal(pagination.totalItems || 0);
      setCurrentPage(pagination.currentPage || 1);
      setTotalPages(pagination.totalPages || 1);
      setHasNextPage(pagination.hasNextPage || false);
      setHasPrevPage(pagination.hasPrevPage || false);
      
      // Atualizar filtros aplicados
      setFilters(appliedFilters);
      
      console.log(`‚úÖ ${mappedProducts.length} produtos carregados e mapeados`);
    } catch (error: any) {
      handleError(error, 'carregar produtos');
    } finally {
      setLoading(false);
    }
  }, [filters, handleError, clearError]);

  /**
   * Criar novo produto
   * REGRA CR√çTICA: Uma localiza√ß√£o = Um produto, Movimenta√ß√£o autom√°tica, Valida√ß√£o de capacidade
   */
  const createProduct = useCallback(async (productData: CreateProductFormData): Promise<void> => {
    setLoading(true);
    clearError();

    try {
      const response = await productService.create(productData);
      
      // Estrutura correta da API: { success: true, data: Product }
      const apiProduct = response.data;
      
      // üîÑ MAPEAR produto criado para formato ProductWithRelations
      const mappedProduct = mapApiProductToProductWithRelations(apiProduct);
      
      // Adicionar produto √† lista local
      setData(prevData => [mappedProduct, ...prevData]);
      setTotal(prevTotal => prevTotal + 1);
      
      console.log('‚úÖ Produto criado e mapeado:', mappedProduct.name);
      console.log('üîÑ Movimenta√ß√£o autom√°tica registrada pela API');
    } catch (error: any) {
      handleError(error, 'criar produto');
      throw error;
    } finally {
      setLoading(false);
    }
  }, [handleError, clearError]);

  /**
   * Atualizar produto existente
   * NOTA: Algumas altera√ß√µes podem gerar movimenta√ß√µes autom√°ticas
   */
  const updateProduct = useCallback(async (
    id: string, 
    productData: Partial<CreateProductFormData>
  ): Promise<void> => {
    setLoading(true);
    clearError();

    try {
      // 1. Buscar produto atual para compara√ß√µes
      const currentProduct = data.find(p => p.id === id);
      if (!currentProduct) {
        throw new Error('Produto n√£o encontrado na lista local');
      }

      // 2. Atualizar produto via API
      const response = await productService.update(id, productData);
      
      // Estrutura correta da API: { success: true, data: Product }
      const apiProduct = response.data;
      
      // üîÑ MAPEAR produto atualizado para formato ProductWithRelations
      const mappedProduct = mapApiProductToProductWithRelations(apiProduct);
      
      // 3. Atualizar produto na lista local
      setData(prevData => 
        prevData.map(p => 
          p.id === id ? mappedProduct : p
        )
      );
      
      // 4. Atualizar produto selecionado se for o mesmo
      if (selectedProduct?.id === id) {
        setSelectedProduct(mappedProduct);
      }
      
      console.log('‚úÖ Produto atualizado e mapeado:', mappedProduct.name);
      
      // Log de mudan√ßas importantes
      if (currentProduct.locationId !== mappedProduct.locationId) {
        console.log('üîÑ Localiza√ß√£o alterada - Movimenta√ß√£o autom√°tica registrada');
      }
      
      if (currentProduct.totalWeight !== mappedProduct.totalWeight) {
        console.log('‚öñÔ∏è Peso alterado - Capacidade recalculada');
      }
    } catch (error: any) {
      handleError(error, 'atualizar produto');
      throw error;
    } finally {
      setLoading(false);
    }
  }, [data, selectedProduct, handleError, clearError]);

  /**
   * Remover produto
   * REGRA CR√çTICA: Libera localiza√ß√£o, registra movimenta√ß√£o autom√°tica de sa√≠da
   */
  const deleteProduct = useCallback(async (id: string): Promise<void> => {
    setLoading(true);
    clearError();

    try {
      // 1. Buscar produto para log
      const productToDelete = data.find(p => p.id === id);
      
      // 2. Remover produto via API
      await productService.delete(id);
      
      // 3. Remover produto da lista local
      setData(prevData => prevData.filter(p => p.id !== id));
      setTotal(prevTotal => prevTotal - 1);
      
      // 4. Limpar produto selecionado se for o mesmo
      if (selectedProduct?.id === id) {
        setSelectedProduct(null);
      }
      
      console.log('‚úÖ Produto removido:', productToDelete?.name);
      console.log('üîÑ Localiza√ß√£o liberada e movimenta√ß√£o registrada');
    } catch (error: any) {
      handleError(error, 'remover produto');
      throw error;
    } finally {
      setLoading(false);
    }
  }, [data, selectedProduct, handleError, clearError]);

  // ============================================================================
  // OPERA√á√ïES ESPECIAIS
  // ============================================================================

  /**
   * Mover produto para nova localiza√ß√£o
   * REGRA CR√çTICA: Uma localiza√ß√£o = Um produto, Movimenta√ß√£o autom√°tica, Valida√ß√£o de capacidade
   */
  const moveProduct = useCallback(async (
    id: string, 
    moveData: MoveProductFormData
  ): Promise<void> => {
    setLoading(true);
    clearError();

    try {
      // 1. Buscar produto atual para valida√ß√µes
      const currentProduct = data.find(p => p.id === id);
      if (!currentProduct) {
        throw new Error('Produto n√£o encontrado na lista local');
      }

      // 2. Verificar se n√£o est√° tentando mover para a mesma localiza√ß√£o
      if (currentProduct.locationId === moveData.newLocationId) {
        throw new Error('O produto j√° est√° nesta localiza√ß√£o');
      }

      // 3. Mover produto (API valida regras cr√≠ticas automaticamente)
      const response = await productService.move(id, moveData);
      
      // Estrutura correta da API: { success: true, data: Product }
      const apiProduct = response.data;
      
      // üîÑ MAPEAR produto movido para formato ProductWithRelations
      const mappedProduct = mapApiProductToProductWithRelations(apiProduct);
      
      // 4. Atualizar produto na lista local
      setData(prevData => 
        prevData.map(p => 
          p.id === id ? mappedProduct : p
        )
      );
      
      // 5. Atualizar produto selecionado se for o mesmo
      if (selectedProduct?.id === id) {
        setSelectedProduct(mappedProduct);
      }
      
      console.log('‚úÖ Produto movido com sucesso');
      console.log('üìç De:', currentProduct.location?.code);
      console.log('üìç Para:', mappedProduct.location?.code);
      console.log('üîÑ Movimenta√ß√£o autom√°tica registrada pela API');
    } catch (error: any) {
      handleError(error, 'mover produto');
      throw error;
    } finally {
      setLoading(false);
    }
  }, [data, selectedProduct, handleError, clearError]);

  /**
   * Obter produto espec√≠fico por ID
   */
  const getProduct = useCallback(async (id: string): Promise<ProductWithRelations | null> => {
    clearError();

    try {
      const response = await productService.getById(id);
      
      // A API retorna: { success: true, data: { product: {...}, relatedData: {...} } }
      const apiData = response.data as any;
      console.log('üîç DEBUG getProduct - Resposta da API:', apiData);
      
      const apiProduct = apiData?.data?.product || apiData?.product || apiData;
      
      if (!apiProduct) {
        console.error('‚ùå Produto n√£o encontrado na resposta da API');
        console.error('üìã Estrutura recebida:', JSON.stringify(apiData, null, 2));
        return null;
      }
      
      console.log('üì¶ Produto da API antes do mapeamento:', apiProduct);
      
      // üîÑ MAPEAR produto para formato ProductWithRelations
      const mappedProduct = mapApiProductToProductWithRelations(apiProduct);
      
      console.log('‚úÖ Produto carregado e mapeado:', mappedProduct.name);
      console.log('üîó SeedType mapeado:', mappedProduct.seedType);
      console.log('üìç Location mapeada:', mappedProduct.location);
      return mappedProduct;
    } catch (error: any) {
      console.error('‚ùå Erro no getProduct:', error);
      handleError(error, 'carregar produto');
      return null;
    }
  }, [handleError, clearError]);

  // ============================================================================
  // AN√ÅLISES E VALIDA√á√ïES
  // ============================================================================

  /**
   * Obter an√°lise de distribui√ß√£o dos produtos
   */
  const getDistributionAnalysis = useCallback(async () => {
    clearError();

    try {
      const response = await productService.getDistributionAnalysis();
      return response.data;
    } catch (error: any) {
      handleError(error, 'obter an√°lise de distribui√ß√£o');
      return null;
    }
  }, [handleError, clearError]);

  /**
   * Validar dados do produto
   */
  const validateProductData = useCallback(async (productData: CreateProductFormData) => {
    clearError();

    try {
      const response = await productService.validateData(productData);
      return response.data;
    } catch (error: any) {
      handleError(error, 'validar dados do produto');
      return null;
    }
  }, [handleError, clearError]);

  /**
   * Encontrar localiza√ß√£o √≥tima para produto
   */
  const findOptimalLocation = useCallback(async (productData: any) => {
    clearError();

    try {
      const response = await productService.findOptimalLocation(productData);
      return response.data;
    } catch (error: any) {
      handleError(error, 'encontrar localiza√ß√£o √≥tima');
      return null;
    }
  }, [handleError, clearError]);

  // ============================================================================
  // NOVAS OPERA√á√ïES AVAN√áADAS
  // ============================================================================

  /**
   * Sa√≠da parcial ou total de produto
   * REGRA CR√çTICA: Reduz quantidade ou remove produto completamente, libera localiza√ß√£o se total
   */
  const partialExit = useCallback(async (
    id: string, 
    quantity: number, 
    reason: string
  ): Promise<void> => {
    setLoading(true);
    clearError();

    try {
      // 1. Buscar produto atual para valida√ß√µes
      const currentProduct = data.find(p => p.id === id);
      if (!currentProduct) {
        throw new Error('Produto n√£o encontrado na lista local');
      }

      // 2. Valida√ß√µes b√°sicas
      if (quantity <= 0) {
        throw new Error('Quantidade deve ser maior que zero');
      }

      if (quantity > currentProduct.quantity) {
        throw new Error(`Quantidade solicitada (${quantity}) excede dispon√≠vel (${currentProduct.quantity})`);
      }

      // 3. Executar sa√≠da parcial
      const response = await productService.partialExit(id, { quantity, reason });
      const result = response.data;
      
      // 4. Atualizar estado local baseado no resultado
      if (result.operation.totalRemoval) {
        // Produto foi completamente removido
        setData(prevData => prevData.filter(p => p.id !== id));
        setTotal(prevTotal => prevTotal - 1);
        
        // Limpar produto selecionado se for o mesmo
        if (selectedProduct?.id === id) {
          setSelectedProduct(null);
        }
        
        console.log('‚úÖ Produto completamente removido por sa√≠da total');
      } else {
        // Produto teve quantidade reduzida
        const mappedProduct = mapApiProductToProductWithRelations(result.product);
        
        setData(prevData => 
          prevData.map(p => 
            p.id === id ? mappedProduct : p
          )
        );
        
        // Atualizar produto selecionado se for o mesmo
        if (selectedProduct?.id === id) {
          setSelectedProduct(mappedProduct);
        }
        
        console.log('‚úÖ Sa√≠da parcial realizada com sucesso');
        console.log(`üì¶ Quantidade removida: ${result.operation.quantityRemoved}`);
        console.log(`üì¶ Quantidade restante: ${result.operation.remainingQuantity}`);
      }
      
      console.log('üîÑ Movimenta√ß√£o de sa√≠da registrada automaticamente');
    } catch (error: any) {
      handleError(error, 'realizar sa√≠da de produto');
      throw error;
    } finally {
      setLoading(false);
    }
  }, [data, selectedProduct, handleError, clearError]);

  /**
   * Movimenta√ß√£o parcial de produto
   * REGRA CR√çTICA: Cria novo produto na nova localiza√ß√£o, reduz quantidade do original
   */
  const partialMove = useCallback(async (
    id: string, 
    quantity: number, 
    newLocationId: string, 
    reason: string
  ): Promise<void> => {
    setLoading(true);
    clearError();

    try {
      // 1. Buscar produto atual para valida√ß√µes
      const currentProduct = data.find(p => p.id === id);
      if (!currentProduct) {
        throw new Error('Produto n√£o encontrado na lista local');
      }

      // 2. Valida√ß√µes b√°sicas
      if (quantity <= 0) {
        throw new Error('Quantidade deve ser maior que zero');
      }

      if (quantity >= currentProduct.quantity) {
        throw new Error('Para mover todo o estoque, use a movimenta√ß√£o total');
      }

      if (currentProduct.locationId === newLocationId) {
        throw new Error('Nova localiza√ß√£o deve ser diferente da atual');
      }

      // 3. Executar movimenta√ß√£o parcial
      const response = await productService.partialMove(id, { quantity, newLocationId, reason });
      const result = response.data;
      
      // 4. Mapear produtos atualizados
      const mappedOriginProduct = mapApiProductToProductWithRelations(result.originProduct);
      const mappedNewProduct = mapApiProductToProductWithRelations(result.newProduct);
      
      // 5. Atualizar estado local
      setData(prevData => {
        // Atualizar produto original e adicionar novo produto
        const updatedData = prevData.map(p => 
          p.id === id ? mappedOriginProduct : p
        );
        return [...updatedData, mappedNewProduct];
      });
      
      setTotal(prevTotal => prevTotal + 1); // Novo produto foi criado
      
      // 6. Atualizar produto selecionado se for o original
      if (selectedProduct?.id === id) {
        setSelectedProduct(mappedOriginProduct);
      }
      
      console.log('‚úÖ Movimenta√ß√£o parcial realizada com sucesso');
      console.log(`üì¶ Quantidade movida: ${result.operation.quantityMoved}`);
      console.log(`üìç De: ${result.operation.fromLocation}`);
      console.log(`üìç Para: ${result.operation.toLocation}`);
      console.log('üîÑ Movimenta√ß√µes de sa√≠da e entrada registradas automaticamente');
    } catch (error: any) {
      handleError(error, 'realizar movimenta√ß√£o parcial');
      throw error;
    } finally {
      setLoading(false);
    }
  }, [data, selectedProduct, handleError, clearError]);

  /**
   * Adicionar estoque a produto existente
   * REGRA CR√çTICA: Mesmo tipo e lote, valida√ß√£o de capacidade da localiza√ß√£o
   */
  const addStock = useCallback(async (
    id: string, 
    quantity: number, 
    reason: string, 
    weightPerUnit?: number
  ): Promise<void> => {
    setLoading(true);
    clearError();

    try {
      // 1. Buscar produto atual para valida√ß√µes
      const currentProduct = data.find(p => p.id === id);
      if (!currentProduct) {
        throw new Error('Produto n√£o encontrado na lista local');
      }

      // 2. Valida√ß√µes b√°sicas
      if (quantity <= 0) {
        throw new Error('Quantidade deve ser maior que zero');
      }

      // 3. Executar adi√ß√£o de estoque
      const response = await productService.addStock(id, { quantity, reason, weightPerUnit });
      const result = response.data;
      
      // 4. Mapear produto atualizado
      const mappedProduct = mapApiProductToProductWithRelations(result.product);
      
      // 5. Atualizar estado local
      setData(prevData => 
        prevData.map(p => 
          p.id === id ? mappedProduct : p
        )
      );
      
      // 6. Atualizar produto selecionado se for o mesmo
      if (selectedProduct?.id === id) {
        setSelectedProduct(mappedProduct);
      }
      
      console.log('‚úÖ Estoque adicionado com sucesso');
      console.log(`üì¶ Quantidade adicionada: ${result.operation.quantityAdded}`);
      console.log(`üì¶ Quantidade anterior: ${result.operation.previousQuantity}`);
      console.log(`üì¶ Nova quantidade: ${result.operation.newQuantity}`);
      console.log('üîÑ Movimenta√ß√£o de ajuste registrada automaticamente');
    } catch (error: any) {
      handleError(error, 'adicionar estoque');
      throw error;
    } finally {
      setLoading(false);
    }
  }, [data, selectedProduct, handleError, clearError]);

  // ============================================================================
  // FUN√á√ÉO DE REFETCH
  // ============================================================================

  const refetch = useCallback(async (): Promise<void> => {
    await fetchProducts();
  }, [fetchProducts]);

  // ============================================================================
  // EFEITO DE INICIALIZA√á√ÉO
  // ============================================================================

  useEffect(() => {
    if (autoFetch) {
      fetchProducts();
    }
  }, [autoFetch, fetchProducts]); // Apenas na montagem inicial

  // ============================================================================
  // RETORNO DO HOOK
  // ============================================================================

  return {
    // Estado dos dados
    data,
    loading,
    error,
    total,
    currentPage,
    totalPages,
    hasNextPage,
    hasPrevPage,
    
    // Estado espec√≠fico
    selectedProduct,
    filters,
    totalItems: total, // Getter conveniente
    
    // Opera√ß√µes CRUD
    fetchProducts,
    createProduct,
    updateProduct,
    deleteProduct,
    
    // Opera√ß√µes especiais
    moveProduct,
    getProduct,
    
    // Novas opera√ß√µes avan√ßadas
    partialExit,
    partialMove,
    addStock,
    
    // An√°lises e valida√ß√µes
    getDistributionAnalysis,
    validateProductData,
    findOptimalLocation,
    
    // Controle de estado
    setSelectedProduct,
    setFilters,
    clearError,
    refetch,
  };
};

export default useProducts; 
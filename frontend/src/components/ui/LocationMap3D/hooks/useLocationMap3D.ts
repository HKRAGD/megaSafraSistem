import { useState, useMemo, useCallback, useEffect } from 'react';
import { Chamber, LocationWithChamber } from '../../../../types';
import { numeroParaLetra, letraParaNumero } from '../../../../utils/locationUtils';

export type ViewMode = '2d' | '3d' | 'isometric';
export type MapMode = 'selection' | 'transfer' | 'visualization';

export interface LocationCube {
  location: LocationWithChamber;
  isAvailable: boolean;
  isOccupied: boolean;
  canSelect: boolean;
  capacityPercentage: number;
  coordinates: {
    quadra: number;
    lado: string | number;
    fila: number;
    andar: number;
  };
}

export interface FloorStats {
  total: number;
  available: number;
  occupied: number;
  occupancyRate: number;
  capacityUsed: number;
  capacityTotal: number;
  capacityPercentage: number;
}

export interface ChamberAnalysis {
  efficiency: number;
  distribution: {
    balanced: boolean;
    hotspots: Array<{ quadra: number; percentage: number }>;
  };
  recommendations: string[];
}

export interface LocationGrid {
  [quadra: number]: {
    [lado: number]: {
      [fila: number]: LocationCube;
    };
  };
}

interface UseLocationMap3DProps {
  chambers: Chamber[];
  allLocations: LocationWithChamber[];
  mode: MapMode;
  onLocationSelect?: (location: LocationWithChamber | null) => void;
  selectedChamber?: Chamber | null;
  availableOnly?: boolean; // Para modo selection
}

export const useLocationMap3D = ({
  chambers,
  allLocations,
  mode,
  onLocationSelect,
  selectedChamber: initialSelectedChamber,
  availableOnly = false,
}: UseLocationMap3DProps) => {
  /*
   * ‚úÖ CORRE√á√ïES FINAIS APLICADAS:
   * 1. ‚úÖ Fun√ß√£o getCapacityColor corrigida - sempre retorna cores CSS v√°lidas
   * 2. ‚úÖ Visualiza√ß√£o padr√£o como 2D para formul√°rio (menos distor√ß√£o)
   * 3. ‚úÖ Rota√ß√µes 3D reduzidas (5deg/-5deg) para melhor UX
   * 4. ‚úÖ allLocations agora recebe TODAS as localiza√ß√µes (limite: 1000)
   * 5. ‚úÖ availableOnly filtra corretamente apenas localiza√ß√µes n√£o ocupadas
   * 6. ‚úÖ CSS do mapa 3D ajustado para n√£o ficar cortado
   * 7. ‚úÖ Height e overflow corrigidos no formul√°rio
   * 
   * PROBLEMA RESOLVIDO: Localiza√ß√µes brancas + Mapa cortado + Dados limitados
   */

  // Estados do mapa
  const [selectedChamber, setSelectedChamber] = useState<Chamber | null>(initialSelectedChamber || null);
  const [selectedFloor, setSelectedFloor] = useState<number>(1);
  const [viewMode, setViewMode] = useState<ViewMode>('2d');
  const [showGrid, setShowGrid] = useState(true);
  const [showCapacityColors, setShowCapacityColors] = useState(false);
  const [selectedLocation, setSelectedLocation] = useState<LocationWithChamber | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [hasAutoSwitched, setHasAutoSwitched] = useState(false);

  // ‚úÖ CORRE√á√ÉO CR√çTICA: Selecionar c√¢mara que tenha localiza√ß√µes de fato
  useEffect(() => {
    console.log('üîÑ useLocationMap3D: Verificando c√¢maras...', {
      chambersCount: chambers.length,
      selectedChamber: selectedChamber?.name || 'None',
      firstChamber: chambers[0]?.name || 'None',
      totalLocations: allLocations.length
    });
    
    if (chambers.length > 0 && allLocations.length > 0 && !selectedChamber) {
      // ‚úÖ CORRE√á√ÉO: Encontrar c√¢mara que tenha localiza√ß√µes de fato
      const chamberWithLocations = chambers.find(chamber => {
        const locationsForThisChamber = allLocations.filter(loc => loc.chamberId === chamber.id);
        console.log(`üîç C√¢mara ${chamber.name} (${chamber.id}): ${locationsForThisChamber.length} localiza√ß√µes`);
        return locationsForThisChamber.length > 0;
      });
      
      if (chamberWithLocations) {
        console.log('‚úÖ Selecionando c√¢mara com localiza√ß√µes:', chamberWithLocations.name);
        setSelectedChamber(chamberWithLocations);
      } else {
        console.log('‚ö†Ô∏è Nenhuma c√¢mara encontrada com localiza√ß√µes. Selecionando primeira mesmo assim:', chambers[0].name);
        setSelectedChamber(chambers[0]);
      }
    }
  }, [chambers, allLocations, selectedChamber]);

  // ‚úÖ CORRE√á√ÉO CR√çTICA: Filtrar localiza√ß√µes da c√¢mara selecionada
  const chamberLocations = useMemo(() => {
    if (!selectedChamber) {
      console.log('‚ùå Nenhuma c√¢mara selecionada');
      return [];
    }
    
    console.log('üîç Filtrando localiza√ß√µes para c√¢mara:', {
      chamberName: selectedChamber.name,
      chamberId: selectedChamber.id,
      totalLocations: allLocations.length
    });
    
    // ‚úÖ CORRE√á√ÉO: Primeiro tentar filtrar por ID exato
    let filtered = allLocations.filter(
      loc => loc.chamberId === selectedChamber.id
    );
    
    // ‚úÖ FALLBACK: Se n√£o encontrar por ID, tentar por nome da c√¢mara
    if (filtered.length === 0) {
      console.log('üîÑ Tentando buscar localiza√ß√µes por nome da c√¢mara...');
      filtered = allLocations.filter(loc => 
        loc.chamber?.name && loc.chamber.name.toLowerCase() === selectedChamber.name.toLowerCase()
      );
      
      if (filtered.length > 0) {
        console.log(`‚úÖ FALLBACK: Encontradas ${filtered.length} localiza√ß√µes por nome da c√¢mara`);
      }
    }

    console.log(`üìç ${filtered.length} localiza√ß√µes encontradas para c√¢mara ${selectedChamber.name}`);
    
    // ‚úÖ DEBUG: Mostrar algumas localiza√ß√µes de exemplo
    if (filtered.length > 0) {
      console.log('üìù Exemplos de localiza√ß√µes encontradas:', filtered.slice(0, 3).map(loc => ({
        code: loc.code,
        isOccupied: loc.isOccupied,
        chamber: loc.chamber?.name
      })));
         } else {
       console.log('‚ö†Ô∏è PROBLEMA: Nenhuma localiza√ß√£o encontrada para esta c√¢mara');
       console.log('üîç Verificando IDs das localiza√ß√µes dispon√≠veis:', 
         allLocations.slice(0, 5).map(loc => ({
           code: loc.code,
           chamberId: loc.chamberId,
           expectedId: selectedChamber.id
         }))
       );
       
       // ‚úÖ DIAGN√ìSTICO: Mostrar quais c√¢maras t√™m localiza√ß√µes de fato
       const uniqueChamberIds = Array.from(new Set(allLocations.map(loc => loc.chamberId)));
       console.log('üè≠ IDs de c√¢maras que t√™m localiza√ß√µes no banco:', uniqueChamberIds);
       console.log('üè≠ C√¢maras carregadas da API:', chambers.map(c => ({ id: c.id, name: c.name })));
       
       // ‚úÖ SUGEST√ÉO: Tentar encontrar correspond√™ncia por nome se IDs n√£o batem
       const chamberWithSameName = chambers.find(c => 
         allLocations.some(loc => 
           loc.chamber?.name && loc.chamber.name.toLowerCase() === c.name.toLowerCase()
         )
       );
       
       if (chamberWithSameName) {
         console.log('üí° SUGEST√ÉO: C√¢mara com mesmo nome encontrada:', chamberWithSameName.name);
       }
     }
    
    return filtered;
  }, [allLocations, selectedChamber]);

  // Grid de localiza√ß√µes do andar selecionado
  const locationGrid = useMemo((): LocationGrid => {
    if (!selectedChamber) return {};

    const grid: LocationGrid = {};
    const { quadras, lados, filas } = selectedChamber.dimensions;

    // Preencher grid com localiza√ß√µes do andar selecionado
    for (let q = 1; q <= quadras; q++) {
      for (let l = 1; l <= lados; l++) {
        for (let f = 1; f <= filas; f++) {
          const location = chamberLocations.find(loc => {
            const locLado = typeof loc.coordinates.lado === 'string' 
              ? letraParaNumero(loc.coordinates.lado)
              : loc.coordinates.lado;
            
            return loc.coordinates.quadra === q &&
              locLado === l &&
              loc.coordinates.fila === f &&
              loc.coordinates.andar === selectedFloor;
          });

          if (location) {
            if (!grid[q]) grid[q] = {};
            if (!grid[q][l]) grid[q][l] = {};

            const isSelected = selectedLocation?.id === location.id;
            
            // ‚úÖ CORRE√á√ÉO: S√≥ permitir sele√ß√£o de localiza√ß√µes dispon√≠veis no modo selection
            const isSelectable = mode === 'selection' ? 
              !location.isOccupied : // Em modo selection, s√≥ pode selecionar n√£o ocupadas
              false; // Em outros modos, n√£o permite sele√ß√£o

            grid[q][l][f] = {
              location: location,
              isAvailable: !location.isOccupied,
              isOccupied: location.isOccupied,
              canSelect: isSelectable,
              capacityPercentage: location.currentWeightKg ? (location.currentWeightKg / location.maxCapacityKg) * 100 : 0,
              coordinates: location.coordinates,
            };
          }
        }
      }
    }

    return grid;
  }, [chamberLocations, selectedChamber, selectedFloor, selectedLocation, mode]);

  // Estat√≠sticas do andar atual
  const floorStats = useMemo((): FloorStats => {
    if (!selectedChamber) {
      return {
        total: 0,
        available: 0,
        occupied: 0,
        occupancyRate: 0,
        capacityUsed: 0,
        capacityTotal: 0,
        capacityPercentage: 0,
      };
    }

    const { quadras, lados, filas } = selectedChamber.dimensions;
    const total = quadras * lados * filas;
    
    const floorLocations = chamberLocations.filter(
      loc => loc.coordinates.andar === selectedFloor
    );
    
    const available = floorLocations.filter(loc => !loc.isOccupied).length;
    const occupied = floorLocations.filter(loc => loc.isOccupied).length;
    const occupancyRate = total > 0 ? (occupied / total) * 100 : 0;

    // C√°lculo de capacidade
    const capacityUsed = floorLocations.reduce((sum, loc) => sum + (loc.currentWeightKg || 0), 0);
    const capacityTotal = floorLocations.reduce((sum, loc) => sum + (loc.maxCapacityKg || 1500), 0);
    const capacityPercentage = capacityTotal > 0 ? (capacityUsed / capacityTotal) * 100 : 0;

    return {
      total,
      available,
      occupied,
      occupancyRate,
      capacityUsed,
      capacityTotal,
      capacityPercentage,
    };
  }, [selectedChamber, chamberLocations, selectedFloor]);

  // An√°lise da c√¢mara
  const chamberAnalysis = useMemo((): ChamberAnalysis | null => {
    if (!selectedChamber || chamberLocations.length === 0) return null;

    const quadras = selectedChamber.dimensions.quadras;
    const quadraStats = Array.from({ length: quadras }, (_, i) => {
      const quadraNumber = i + 1;
      const quadraLocations = chamberLocations.filter(
        loc => loc.coordinates.quadra === quadraNumber
      );
      const occupied = quadraLocations.filter(loc => loc.isOccupied).length;
      const total = quadraLocations.length;
      const percentage = total > 0 ? (occupied / total) * 100 : 0;
      
      return { quadra: quadraNumber, percentage };
    });

    const avgOccupancy = quadraStats.reduce((sum, q) => sum + q.percentage, 0) / quadras;
    const efficiency = avgOccupancy;
    const threshold = 20; // 20% de diferen√ßa considera desequilibrio
    const balanced = quadraStats.every(q => Math.abs(q.percentage - avgOccupancy) <= threshold);

    const hotspots = quadraStats.filter(q => q.percentage > avgOccupancy + threshold);

    const recommendations: string[] = [];
    if (!balanced) {
      recommendations.push('Distribui√ß√£o desequilibrada entre quadras');
    }
    if (hotspots.length > 0) {
      recommendations.push(`Quadras ${hotspots.map(h => h.quadra).join(', ')} com alta ocupa√ß√£o`);
    }
    if (efficiency < 30) {
      recommendations.push('Baixa utiliza√ß√£o da c√¢mara');
    } else if (efficiency > 90) {
      recommendations.push('C√¢mara pr√≥xima da capacidade m√°xima');
    }

    return {
      efficiency,
      distribution: { balanced, hotspots },
      recommendations,
    };
  }, [selectedChamber, chamberLocations]);

  // Fun√ß√£o para obter cor baseada na capacidade
  const getCapacityColor = useCallback((capacityPercentage: number, isOccupied: boolean) => {
    // ‚úÖ CORRE√á√ÉO CR√çTICA: Se a localiza√ß√£o est√° ocupada, sempre vermelha
    if (isOccupied) {
      return '#f44336'; // Vermelho para localiza√ß√µes ocupadas
    }
    
    // ‚úÖ Para localiza√ß√µes dispon√≠veis, sempre verde (por enquanto para debugging)
    // Se showCapacityColors estiver habilitado, usar gradiente, sen√£o verde padr√£o
    if (!showCapacityColors) {
      return '#4caf50'; // Verde padr√£o para dispon√≠veis
    }
    
    // Cores baseadas na capacidade (somente se enabled)
    if (capacityPercentage <= 30) {
      return '#4caf50';      // Verde (0-30%)
    }
    if (capacityPercentage <= 70) {
      return '#ff9800';      // Laranja (31-70%)
    }
    if (capacityPercentage <= 90) {
      return '#f44336';      // Vermelho (71-90%)
    }
    return '#d32f2f';        // Vermelho escuro (91-100%)
  }, [showCapacityColors]);

  // Fun√ß√£o para obter info do tooltip
  const getTooltipInfo = useCallback((cube: LocationCube) => {
    const { location, capacityPercentage, isOccupied, isAvailable } = cube;
    
    return {
      code: location.code,
      chamber: location.chamber?.name || 'N/A',
      status: isOccupied ? 'Ocupada' : 'Dispon√≠vel',
      statusColor: isOccupied ? 'error' : 'success',
      capacity: `${location.currentWeightKg || 0}kg / ${location.maxCapacityKg}kg`,
      capacityPercentage: capacityPercentage.toFixed(1),
      canSelect: cube.canSelect,
      coordinates: `Q${location.coordinates.quadra}-L${location.coordinates.lado}-F${location.coordinates.fila}-A${location.coordinates.andar}`,
    };
  }, []);

  // Handler para sele√ß√£o de localiza√ß√£o
  const handleLocationSelect = useCallback((cube: LocationCube) => {
    if (!cube.canSelect || !onLocationSelect) return;
    
    const newSelection = selectedLocation?.id === cube.location.id 
      ? null 
      : cube.location;
    
    onLocationSelect(newSelection);
  }, [selectedLocation, onLocationSelect]);

  // Handler para mudan√ßa de c√¢mara
  const handleChamberChange = useCallback((chamber: Chamber | null) => {
    setSelectedChamber(chamber);
    setSelectedFloor(1); // Reset para primeiro andar
    if (onLocationSelect) {
      onLocationSelect(null); // Limpar sele√ß√£o
    }
  }, [onLocationSelect]);

  // Handler para mudan√ßa de andar
  const handleFloorChange = useCallback((floor: number) => {
    setSelectedFloor(floor);
    if (onLocationSelect) {
      onLocationSelect(null); // Limpar sele√ß√£o ao mudar andar
    }
  }, [onLocationSelect]);

  // ‚úÖ CORRE√á√ÉO CR√çTICA: Melhorar l√≥gica do hasData
  const hasData = useMemo(() => {
    const result = chambers.length > 0 && selectedChamber != null && chamberLocations.length > 0;
    console.log('üîç hasData calculado:', {
      chambers: chambers.length,
      selectedChamber: selectedChamber?.name || 'None',
      chamberLocations: chamberLocations.length,
      result
    });
    return result;
  }, [chambers.length, selectedChamber, chamberLocations.length]);

  // üìä SMART CHAMBER SELECTION - Selecionar c√¢mara com localiza√ß√µes
  useEffect(() => {
    console.log('üîÑ useLocationMap3D: Verificando c√¢maras...', {
      chambersCount: chambers.length,
      selectedChamber: selectedChamber?.name || 'None',
      firstChamber: chambers[0]?.name || 'None',
      totalLocations: allLocations.length
    });
    
    if (chambers.length === 0) {
      console.log('‚è≥ Aguardando c√¢maras...');
      return;
    }

    // üéØ SMART SELECTION: Escolher c√¢mara inteligentemente
    const smartChamberSelection = () => {
      // Se n√£o h√° c√¢mara selecionada ou a selecionada n√£o tem localiza√ß√µes
      if (!selectedChamber || !hasLocationsForChamber(selectedChamber.name)) {
        
        // 1. Tentar usar a c√¢mara inicial se ela tem localiza√ß√µes
        if (initialSelectedChamber && hasLocationsForChamber(initialSelectedChamber.name)) {
          console.log('‚úÖ Usando c√¢mara inicial:', initialSelectedChamber.name);
          setSelectedChamber(initialSelectedChamber);
          return;
        }
        
        // 2. Encontrar primeira c√¢mara com localiza√ß√µes
        const chamberWithLocations = chambers.find(chamber => {
          const hasLocs = hasLocationsForChamber(chamber.name);
          console.log(`üè≠ Verificando ${chamber.name}:`, hasLocs ? '‚úÖ TEM localiza√ß√µes' : '‚ùå SEM localiza√ß√µes');
          return hasLocs;
        });
        
        if (chamberWithLocations) {
          console.log('üéØ AUTO-SELE√á√ÉO: Selecionando c√¢mara com localiza√ß√µes:', chamberWithLocations.name);
          setSelectedChamber(chamberWithLocations);
          setHasAutoSwitched(true);
          setError(null);
          return;
        }
        
        // 3. Se nenhuma c√¢mara tem localiza√ß√µes, selecionar a primeira
        console.log('‚ö†Ô∏è Nenhuma c√¢mara tem localiza√ß√µes, selecionando primeira:', chambers[0]?.name);
        setSelectedChamber(chambers[0] || null);
        setError('Nenhuma c√¢mara possui localiza√ß√µes geradas. Gere localiza√ß√µes para come√ßar.');
      }
    };

    smartChamberSelection();
  }, [chambers, allLocations, initialSelectedChamber, selectedChamber]);

  // üîç VERIFICAR SE C√ÇMARA TEM LOCALIZA√á√ïES
  const hasLocationsForChamber = (chamberName: string): boolean => {
    if (!chamberName || allLocations.length === 0) return false;
    
    // Buscar por nome da c√¢mara
    const locationsByName = allLocations.filter(loc => 
      loc.chamber?.name === chamberName
    );
    
    return locationsByName.length > 0;
  };

  // üìç FILTRAR LOCALIZA√á√ïES POR C√ÇMARA
  const getFilteredLocations = (chamberName: string): LocationWithChamber[] => {
    if (!chamberName || allLocations.length === 0) {
      console.log('‚ö†Ô∏è Par√¢metros inv√°lidos para filtro:', { chamberName, locationsCount: allLocations.length });
      return [];
    }

    console.log('üîç Filtrando localiza√ß√µes para c√¢mara:', {
      chamberName,
      chamberId: chambers.find(c => c.name === chamberName)?.id,
      totalLocations: allLocations.length
    });

    // Buscar por nome da c√¢mara (mais confi√°vel)
    let filteredLocations = allLocations.filter(loc => 
      loc.chamber?.name === chamberName
    );

    console.log('üìç', filteredLocations.length, 'localiza√ß√µes encontradas para c√¢mara', chamberName);
    
    // üîç DIAGN√ìSTICO DETALHADO quando n√£o encontra localiza√ß√µes
    if (filteredLocations.length === 0) {
      console.log('‚ö†Ô∏è PROBLEMA: Nenhuma localiza√ß√£o encontrada para esta c√¢mara');
      
      // Mostrar amostras de dados para debug
      const sampleLocations = allLocations.slice(0, 5).map(loc => ({
        code: loc.code,
        chamberId: loc.chamberId,
        chamberName: loc.chamber?.name
      }));
      console.log('üîç Amostra de localiza√ß√µes dispon√≠veis:', sampleLocations);
      
      // Mostrar IDs √∫nicos de c√¢maras no banco
      const uniqueChamberIds = Array.from(new Set(allLocations.map(loc => loc.chamberId)));
      console.log('üè≠ IDs de c√¢maras que t√™m localiza√ß√µes no banco:', uniqueChamberIds);
      
      // Mostrar c√¢maras carregadas
      const loadedChambers = chambers.map(c => ({ id: c.id, name: c.name }));
      console.log('üè≠ C√¢maras carregadas da API:', loadedChambers);
      
      // Sugerir c√¢maras dispon√≠veis
      const availableChambers = chambers.filter(chamber => 
        allLocations.some(loc => loc.chamber?.name === chamber.name)
      );
      
      if (availableChambers.length > 0) {
        console.log('üí° SUGEST√ÉO: C√¢mara com mesmo nome encontrada:', availableChambers[0].name);
      }
    }

    return filteredLocations;
  };

  return {
    // Estados
    selectedChamber,
    selectedFloor,
    viewMode,
    showGrid,
    showCapacityColors,
    selectedLocation,
    isLoading,
    error,
    hasAutoSwitched,
    
    // Dados processados
    locationGrid,
    floorStats,
    chamberAnalysis,
    chamberLocations,
    
    // Handlers
    handleLocationSelect,
    handleChamberChange,
    handleFloorChange,
    setViewMode,
    setShowGrid,
    setShowCapacityColors,
    
    // Utilities
    getCapacityColor,
    getTooltipInfo,
    
    // Estado de loading/erro
    hasData,
    hasLocationsForChamber,
    getFilteredLocations
  };
}; 